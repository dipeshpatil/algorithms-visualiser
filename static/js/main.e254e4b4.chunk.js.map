{"version":3,"sources":["utils/thumbs/binary.jpg","utils/thumbs/nqueens.jpg","utils/thumbs/path.jpg","utils/thumbs/sorting.jpg","utils/thumbs/word_search.jpg","utils/svg/maskShapesNew.svg","backTrackingAlgorithms/nQueensProblem/crown.png","utils/navbar.jsx","utils/indexTable.jsx","wordSearchVisualiser/wordSearch-utils/chars.js","wordSearchVisualiser/Cell/Cell.jsx","utils/randomIntFromInterval.js","wordSearchVisualiser/algorithms/wordDFS.js","utils/backbar.jsx","wordSearchVisualiser/wordSearch-utils/problemStatement.jsx","wordSearchVisualiser/wordSearch.jsx","pathFinderVisualiser/Node/Node.jsx","pathFinderVisualiser/pathFindingAlgorithms/dijkstra.js","pathFinderVisualiser/pathFindingAlgorithms/breadthFirstSearch.js","pathFinderVisualiser/pathFindingAlgorithms/depthFirstSearch.js","pathFinderVisualiser/pathFindingAlgorithms/astar.js","pathFinderVisualiser/pathFindingAlgorithms/bidirectionalSearch.js","pathFinderVisualiser/generateMaze.js","pathFinderVisualiser/pathfinder-utils/highlightMazeNodes.js","pathFinderVisualiser/pathfinder-utils/legend.jsx","pathFinderVisualiser/pathfinderVisualiser.jsx","pathFinderVisualiser/pathfinder-utils/complexityTable.jsx","sortingAlgorithms/complexityTable.jsx","sortingAlgorithms/sortingAlgorithms/swap.js","sortingAlgorithms/sortingAlgorithms/quickSort.js","sortingAlgorithms/sortingAlgorithms/mergeSort.js","sortingAlgorithms/sortingAlgorithms/heapSort.js","sortingAlgorithms/cellColors.js","sortingAlgorithms/sortingVisualiser.jsx","sortingAlgorithms/sortingAlgorithms/bubbleSort.js","sortingAlgorithms/sortingAlgorithms/insertionSort.js","sortingAlgorithms/sortingAlgorithms/selectionSort.js","utils/header.jsx","searchingAlgorithms/arrayTile.jsx","searchingAlgorithms/binarySearch/binarySearch.jsx","searchingAlgorithms/searchingAlgorithms.js","searchingAlgorithms/linearSearch/linearSearch.jsx","backTrackingAlgorithms/backTrackingAlgorithms.js","backTrackingAlgorithms/nQueensProblem/nQueensProblem.jsx","backTrackingAlgorithms/ratInAMaze/arrayofMazes.js","backTrackingAlgorithms/ratInAMaze/ratInAMaze.jsx","App.js","index.js"],"names":["module","exports","NavBar","className","href","maskStyles","margin","textAlign","backgroundImage","MaskedStyleSVG","backgroundSize","backgroundPosition","backgroundRepeat","width","backgroundClip","WebkitBackgroundClip","color","IndexTable","props","state","style","to","src","PathThumb","alt","SortingThumb","BinaryThumb","NQueensThumb","WordSearch","React","Component","CHARS","Cell","this","row","col","val","extraClass","found","id","randomIntFromInterval","min","max","Math","floor","random","dfs","grid","i","j","count","word","animations","length","push","charAt","temp","BackBar","ProblemStatement","disabled","resetArray","cell","document","getElementById","console","log","clearBoard","gridBox","setProperty","array","Array","visited","setState","value","toUpperCase","wordDFS","founds","slice","highlightSection","k","testing","setTimeout","classList","transition","add","alert","map","ele","idx","key","type","placeholder","role","aria-label","onClick","newBoard","visualiseWordSearch","Node","isFinish","isStart","isWall","onNodeClick","onNodeOver","onNodeOut","extraClassName","onMouseOver","onMouseOut","dijkstra","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","calculatePath","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","shortestPathNodes","currentNode","unshift","getAllNeighbors","ROWS","COLS","calculateCost","distanceType","sqrt","pow","abs","getCostFunction","costs","getNeighbors","getAdjacents","generateMaze","ROW","COL","maze","generate","height","getNodeNeighbors","nodeArray","SPEED","borderStyles","border","Legend","ComplexityTable","SCREEN_WIDTH","window","screen","PathFinderVisualiser","modifyingNodeState","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","disableMazesButton","disableNodesButton","disableClearMazeButton","disableClearPathButton","disableAlgoDropdown","disablePerformButton","highlightMazeNodes","isGridDiagonalsHighlighted","speed","setUpGrid","createNode","cost","F","G","H","remove","nodeVal","nRow","nCol","parseInt","highlightGrid","unHighlightGrid","highlightGridDiagonals","unHighlightGridDiagonals","NODE_STATE","toggleStartOrFinish","toggleWall","NODE_ROW","NODE_COL","nodeType","newGrid","newNode","mazeGrid","STATE","algorithm","visualiseAlgorithms","nodesInShortestPathOrder","STARTNODE","FINISHNODE","queue","bfs","closedlist","openlist","a","b","current","nNode","includes","m","astar","squeue","dqueue","svisited","dvisited","currsn","currdn","sneighbors","dneighbors","sneighbor","dneighbor","sourcePaths","destPaths","sPathRow","splast","destPathRow","bidirectionalSearch","source_visited","dest_visited","sPathNodes","dPathNodes","animatePath","stack","pop","animateShortestPath","unHighlightDiagonals","highlightDiagonals","handleNodeOperations","highlightNodes","unHighlightNodes","Button","variant","modifyNodeState","clearPath","InputGroup","Form","Control","defaultValue","as","Append","selectAlgorithm","colSpan","swap","arr","quickSortHelper","left","right","pivot","getMergeSortAnimations","auxiliaryArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","doMerge","buildMaxHeap","heapify","index","leftChild","righChild","heap","cellColors","reverse","SortingVisualiser","SIZE_OF_BOARD","drawBoard","arrayBoard","innerHTML","container","createElement","appendChild","cellStyle","backgroundColor","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","bubbleSort","selectionSort","insertionSort","quickSort","heapSort","mergeSort","speedFactor","arrayBlocks","getElementsByClassName","idxOne","idxTwo","elemOne","elemTwo","blockOne","blockTwo","blockOneStyle","blockTwoStyle","blockOneIdx","newColor","getQuickSortAnimations","items","visualiseAnimations","isSorted","counter","getBubbleSortAnimations","getInsertionSortAnimations","currentIdx","smallestIdx","getSelectionSortAnimations","lastElement","getHeapSortAnimations","Prepend","Header","title","colorName","ArrayTile","BinarySearch","elementFoundAt","target","msgAfterExecution","previousLength","prevArray","sortedArray","start","end","arrayTiles","binarySearchAnimations","element","mid","resetAllTiles","hightlightWithinBounds","FormControl","binarySearch","LinearSearch","msg","linearSearchAnimations","currentEle","arrayBar","arrayBarStyle","linearSearch","createBoard","size","board","getRowsOfZeroes","solveNQueenUtil","N","isSafe","isRatSafe","x","y","mazeRows","mazeCols","solveRatInAMaze","sol","endOfMazeX","endOfMazeY","ANIMATION_SPEED_SECONDS","NQueensProblem","SIZE","padding","fontSize","item","crownsI","l","crown","resultsDiv","NQueensAnimations","getNQueensAnimations","isQueenSafe","prepend","trueValues","readOnly","MAZES","MAZE","SOL","prepareSolutionBoardOfZeroes","RatInAMazeProblem","solveMaze","solution","blocks","rat","finalPath","blockStyle","testAlgo","searchCombined","App","exact","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.e254e4b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/binary.89542d39.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nqueens.7f3c1a9c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/path.51b8bef4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sorting.d0c447c2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/word_search.5985a426.jpg\";","module.exports = __webpack_public_path__ + \"static/media/maskShapesNew.52370074.svg\";","module.exports = __webpack_public_path__ + \"static/media/crown.684af6ea.png\";","import React from \"react\";\r\n\r\nconst NavBar = () => (\r\n    <div className=\"bg-danger py-2 px-2\">\r\n        <span>\r\n            <a\r\n                className=\"btn-sm text-decoration-none bg-danger rounded-0 text-light\"\r\n                href=\"https://github.com/dipeshpatil/algorithms-visualiser\"\r\n            >\r\n                <i className=\"fab text-light fa-github\"></i>\r\n                &nbsp; Source Code\r\n            </a>\r\n            <a\r\n                className=\"btn-sm text-decoration-none bg-danger rounded-0 text-light\"\r\n                href=\"https://linkedin.com/in/dipesh-patil\"\r\n            >\r\n                <i className=\"fab text-light fa-linkedin\"></i>\r\n                &nbsp; Dipesh Patil\r\n            </a>\r\n        </span>\r\n    </div>\r\n);\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport BinaryThumb from \"./thumbs/binary.jpg\";\r\nimport NQueensThumb from \"./thumbs/nqueens.jpg\";\r\nimport PathThumb from \"./thumbs/path.jpg\";\r\nimport SortingThumb from \"./thumbs/sorting.jpg\";\r\nimport WordSearch from \"./thumbs/word_search.jpg\";\r\n\r\nimport MaskedStyleSVG from \"./svg/maskShapesNew.svg\";\r\n\r\nconst maskStyles = {\r\n    margin: \"0 auto\",\r\n    textAlign: \"center\",\r\n    backgroundImage: `url(${MaskedStyleSVG})`,\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"50%\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    width: \"auto\",\r\n    backgroundClip: \"text\",\r\n    WebkitBackgroundClip: \"text\",\r\n    color: \"transparent\",\r\n};\r\nexport default class IndexTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-3\">\r\n                <div className=\"text-center text-light\">\r\n                    <h1 style={maskStyles} className=\"maskText mt-1\">\r\n                        Algorithms\r\n                        <br />\r\n                        Visualiser\r\n                    </h1>\r\n                </div>\r\n                <center>\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"col-sm-4 col-6\">\r\n                            <NavLink to=\"/pathfinder\">\r\n                                <img\r\n                                    className=\"img-fluid w-20 shadowB\"\r\n                                    src={PathThumb}\r\n                                    alt=\"Path Finding\"\r\n                                />\r\n                                <p className=\"text-light thumb-title\">\r\n                                    Path Finding\r\n                                </p>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className=\"col-sm-4 col-6\">\r\n                            <NavLink to=\"/sorting\">\r\n                                <img\r\n                                    className=\"img-fluid w-20 shadowB\"\r\n                                    src={SortingThumb}\r\n                                    alt=\"Sorting\"\r\n                                />\r\n                                <p className=\"text-light thumb-title\">\r\n                                    Sorting Visualiser\r\n                                </p>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className=\"col-sm-4 col-6\">\r\n                            <NavLink to=\"/searching\">\r\n                                <img\r\n                                    className=\"img-fluid w-20 shadowB\"\r\n                                    src={BinaryThumb}\r\n                                    alt=\"Searching\"\r\n                                />\r\n                                <p className=\"text-light thumb-title\">\r\n                                    Searching Visualiser\r\n                                </p>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className=\"col-sm-4 col-6\">\r\n                            <NavLink to=\"/n-queens-problem\">\r\n                                <img\r\n                                    className=\"img-fluid w-20 shadowB\"\r\n                                    src={NQueensThumb}\r\n                                    alt=\"NQueens\"\r\n                                />\r\n                                <p className=\"text-light thumb-title\">\r\n                                    N-Queens Problem\r\n                                </p>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className=\"col-sm-4 col-6\">\r\n                            <NavLink to=\"/word-search\">\r\n                                <img\r\n                                    className=\"img-fluid w-20 shadowB\"\r\n                                    src={WordSearch}\r\n                                    alt=\"Word Searching\"\r\n                                />\r\n                                <p className=\"text-light thumb-title\">\r\n                                    Word Searching\r\n                                </p>\r\n                            </NavLink>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-center text-light mt-4\">\r\n                        Happy Visualisation Day!\r\n                    </div>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const CHARS = [\r\n    \"A\",\r\n    \"B\",\r\n    \"C\",\r\n    \"D\",\r\n    \"E\",\r\n    \"F\",\r\n    \"G\",\r\n    \"H\",\r\n    \"I\",\r\n    \"J\",\r\n    \"K\",\r\n    \"L\",\r\n    \"M\",\r\n    \"N\",\r\n    \"O\",\r\n    \"P\",\r\n    \"Q\",\r\n    \"R\",\r\n    \"S\",\r\n    \"T\",\r\n    \"U\",\r\n    \"V\",\r\n    \"W\",\r\n    \"X\",\r\n    \"Y\",\r\n    \"Z\",\r\n];\r\n\r\nexport default CHARS;\r\n","import React from \"react\";\r\n\r\nimport \"./Cell.css\";\r\n\r\nexport default class Cell extends React.Component {\r\n    render() {\r\n        const { row, col, val, found } = this.props;\r\n\r\n        const extraClass = found ? \"found-cell\" : \"default-cell\";\r\n\r\n        return (\r\n            <div id={`cell-${row}-${col}`} className={`ws-cell ${extraClass}`}>\r\n                {val}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","export function wordDFS(grid = [], word, animations = []) {\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[i].length; j++) {\r\n            const { row, col, val, visited } = grid[i][j];\r\n            animations.push([i, j, \"testing\", \"not-found\"]);\r\n            if (\r\n                val === word.charAt(0) &&\r\n                dfs(grid, row, col, 0, word, animations) &&\r\n                !visited\r\n            ) {\r\n                grid[i][j].visited = true;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction dfs(grid = [], i, j, count, word, animations = []) {\r\n    if (count === word.length) return true;\r\n\r\n    if (i >= 0 && i < grid.length && j >= 0 && j < grid[i].length) {\r\n        animations.push([i, j, \"not-found\", \"not-found\"]);\r\n    }\r\n\r\n    if (\r\n        i < 0 ||\r\n        i >= grid.length ||\r\n        j < 0 ||\r\n        j >= grid[i].length ||\r\n        grid[i][j].val !== word.charAt(count)\r\n    )\r\n        return false;\r\n    let temp = grid[i][j].val;\r\n    grid[i][j].val = \" \";\r\n\r\n    var found =\r\n        dfs(grid, i + 1, j, count + 1, word, animations) ||\r\n        dfs(grid, i - 1, j, count + 1, word, animations) ||\r\n        dfs(grid, i, j + 1, count + 1, word, animations) ||\r\n        dfs(grid, i, j - 1, count + 1, word, animations);\r\n\r\n    if (found === true) {\r\n        animations.push([i, j, \"not-found\", \"found\"]);\r\n    } else {\r\n        animations.push([i, j, \"not-found\", \"not-found\"]);\r\n    }\r\n    grid[i][j].val = temp;\r\n    return found;\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst BackBar = () => (\r\n    <div className=\"bg-dark py-2\">\r\n        <NavLink to=\"/\">\r\n            <span className=\"text-light ml-3\">\r\n                <i className=\"fas fa-arrow-left\"></i> Back\r\n            </span>\r\n        </NavLink>\r\n    </div>\r\n);\r\n\r\nexport default BackBar;\r\n","import React from \"react\";\r\n\r\nconst ProblemStatement = () => (\r\n    <div className=\"mt-2 text-light\">\r\n        <br />\r\n        Given a 2D board and a word, find if the word exists in the grid.\r\n        <br />\r\n        <br />\r\n        The word can be constructed from letters of sequentially adjacent cell,\r\n        where \"adjacent\" cells are those horizontally or vertically neighboring.\r\n        The same letter cell may not be used more than once.\r\n        <br />\r\n        <br />\r\n        <b>Example:</b>\r\n        <br />\r\n        <br />\r\n        <pre className=\"text-light\">\r\n            <b>board</b> = [<br />\r\n            &nbsp;&nbsp;&nbsp;&nbsp;['A','B','C','E'],\r\n            <br />\r\n            &nbsp;&nbsp;&nbsp;&nbsp;['S','F','C','S'],\r\n            <br />\r\n            &nbsp;&nbsp;&nbsp;&nbsp;['A','D','E','E']\r\n            <br />\r\n            ]\r\n            <br />\r\n            <br />\r\n            Given word = \"<b>ABCCED</b>\", return <b>true</b> <br />\r\n            Given word = \"<b>SEE</b>\", return <b>true</b> <br />\r\n            Given word = \"<b>ABCB</b>\", return <b>false</b>\r\n        </pre>\r\n    </div>\r\n);\r\n\r\nexport default ProblemStatement;\r\n","import React from \"react\";\r\n\r\nimport CHARS from \"./wordSearch-utils/chars\";\r\nimport Cell from \"./Cell/Cell\";\r\nimport { randomIntFromInterval } from \"./../utils/randomIntFromInterval\";\r\n\r\nimport { wordDFS } from \"./algorithms/wordDFS\";\r\nimport BackBar from \"./../utils/backbar\";\r\nimport ProblemStatement from \"./wordSearch-utils/problemStatement\";\r\n\r\nconst BOARD_SIZE = 10;\r\n\r\nexport default class WordSearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            disabled: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    clearBoard() {\r\n        for (let i = 0; i < BOARD_SIZE; i++) {\r\n            for (let j = 0; j < BOARD_SIZE; j++) {\r\n                let cell = document.getElementById(`cell-${i}-${j}`);\r\n                cell.className = \"ws-cell default-cell\";\r\n                console.log(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    newBoard() {\r\n        this.clearBoard();\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const gridBox = document.getElementById(\"ws-grid\");\r\n        gridBox.style.setProperty(\"--ws-grid-rows\", BOARD_SIZE);\r\n        gridBox.style.setProperty(\"--ws-grid-cols\", BOARD_SIZE);\r\n\r\n        const array = new Array(BOARD_SIZE);\r\n        for (let i = 0; i < BOARD_SIZE; i++) {\r\n            array[i] = new Array(BOARD_SIZE);\r\n            for (let j = 0; j < BOARD_SIZE; j++) {\r\n                array[i][j] = {\r\n                    row: i,\r\n                    col: j,\r\n                    val: CHARS[randomIntFromInterval(0, CHARS.length - 1)],\r\n                    found: false,\r\n                    visited: false,\r\n                };\r\n            }\r\n        }\r\n\r\n        this.setState({ grid: array });\r\n    }\r\n\r\n    visualiseWordSearch() {\r\n        const word = document.getElementById(\"word\").value.toUpperCase();\r\n\r\n        if (!word) {\r\n            alert(\"Word must be provided\");\r\n            return;\r\n        }\r\n\r\n        this.setState({ disabled: true });\r\n\r\n        const animations = [];\r\n        const { grid } = this.state;\r\n        wordDFS(grid, word, animations);\r\n\r\n        const founds = animations.slice();\r\n        const highlightSection = [];\r\n        for (let k = 0; k < founds.length; k++) {\r\n            let i = founds[k][0],\r\n                j = founds[k][1],\r\n                found = founds[k][3];\r\n            if (found === \"found\") highlightSection.push([i, j]);\r\n        }\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [row, col, testing, found] = animations[i];\r\n            const cell = document.getElementById(`cell-${row}-${col}`);\r\n            setTimeout(() => {\r\n                if (testing === \"testing\") {\r\n                    cell.classList = \"ws-cell testing\";\r\n                } else if (found === \"found\") {\r\n                    cell.classList = \"ws-cell found-cell\";\r\n                } else {\r\n                    cell.classList = \"ws-cell not-found-cell\";\r\n                }\r\n                cell.style.transition = \"500ms all\";\r\n\r\n                if (i === animations.length - 1) {\r\n                    this.setState({ disabled: false });\r\n                    for (let k = 0; k < highlightSection.length; k++) {\r\n                        const [i, j] = highlightSection[k];\r\n                        setTimeout(() => {\r\n                            document\r\n                                .getElementById(`cell-${i}-${j}`)\r\n                                .classList.add(\"ws-popupBlocks\");\r\n                        }, k * 50);\r\n                    }\r\n                }\r\n            }, i * 500);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { grid, disabled } = this.state;\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-7 mt-1\">\r\n                            <div className=\"ws-box rounded shadowB\">\r\n                                <div className=\"ws-grid\" id=\"ws-grid\">\r\n                                    {grid.map((ele) => {\r\n                                        return ele.map((cell, idx) => {\r\n                                            const {\r\n                                                row,\r\n                                                col,\r\n                                                val,\r\n                                                found,\r\n                                                visited,\r\n                                            } = cell;\r\n                                            return (\r\n                                                <Cell\r\n                                                    key={`${row}-${col}`}\r\n                                                    row={row}\r\n                                                    col={col}\r\n                                                    val={val}\r\n                                                    visited={visited}\r\n                                                    found={found}\r\n                                                />\r\n                                            );\r\n                                        });\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-sm-5 mt-2\">\r\n                            <div className=\"input-group\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <span\r\n                                        className=\"input-group-text\"\r\n                                        id=\"basic-addon2\"\r\n                                    >\r\n                                        Word\r\n                                    </span>\r\n                                </div>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id=\"word\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Ex. BINOD\"\r\n                                />\r\n                            </div>\r\n                            <div\r\n                                className=\"btn-group btn-block mt-2\"\r\n                                role=\"group\"\r\n                                aria-label=\"Basic example\"\r\n                            >\r\n                                <button\r\n                                    onClick={() => this.clearBoard()}\r\n                                    type=\"button\"\r\n                                    disabled={disabled}\r\n                                    className=\"btn btn-danger\"\r\n                                >\r\n                                    Reset\r\n                                </button>\r\n                                <button\r\n                                    onClick={() => this.newBoard()}\r\n                                    type=\"button\"\r\n                                    disabled={disabled}\r\n                                    className=\"btn btn-success\"\r\n                                >\r\n                                    New\r\n                                </button>\r\n                                <button\r\n                                    onClick={() => this.visualiseWordSearch()}\r\n                                    type=\"button\"\r\n                                    disabled={disabled}\r\n                                    className=\"btn btn-dark\"\r\n                                >\r\n                                    Search\r\n                                </button>\r\n                            </div>\r\n                            <ProblemStatement />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends React.Component {\r\n    render() {\r\n        const {\r\n            row,\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            onNodeClick,\r\n            onNodeOver,\r\n            onNodeOut,\r\n        } = this.props;\r\n\r\n        const extraClassName = isFinish\r\n            ? \"node-finish\"\r\n            : isStart\r\n            ? \"node-start\"\r\n            : isWall\r\n            ? \"node-wall\"\r\n            : \"\";\r\n\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName} `}\r\n                onClick={() => onNodeClick(row, col)}\r\n                onMouseOver={() => onNodeOver(row, col)}\r\n                onMouseOut={() => onNodeOut(row, col)}\r\n            ></div>\r\n        );\r\n    }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n\r\n        if (closestNode.isWall) continue;\r\n\r\n        if (closestNode.distance === Infinity)\r\n            return [visitedNodesInOrder, calculatePath(finishNode)];\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n\r\n        if (closestNode === finishNode)\r\n        return [visitedNodesInOrder, calculatePath(finishNode)];\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nexport function getAllNodes(grid = []) {\r\n    const nodes = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[0].length; j++) {\r\n            nodes.push(grid[i][j]);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n","export function bfs(grid = [], startNode, finishNode) {\r\n    const queue = [];\r\n    const visitedNodesInOrder = [];\r\n\r\n    startNode.isVisited = true;\r\n    queue.push(startNode);\r\n\r\n    while (!!queue.length) {\r\n        let node = queue.shift();\r\n\r\n        if (finishNode === node)\r\n            return [visitedNodesInOrder, calculatePath(finishNode)];\r\n\r\n        if (node.isWall) continue;\r\n\r\n        const neighbors = getAllNeighbors(grid, node);\r\n\r\n        for (const neighbor of neighbors) {\r\n            neighbor.isVisited = true;\r\n            neighbor.previousNode = node;\r\n            visitedNodesInOrder.push(neighbor);\r\n            queue.push(neighbor);\r\n        }\r\n    }\r\n\r\n    return [visitedNodesInOrder, calculatePath(finishNode)];\r\n}\r\n\r\nfunction calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n\r\nfunction getAllNeighbors(grid = [], node) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n\r\n    const { row, col } = node;\r\n    const neighbors = [];\r\n\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isVisited &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall &&\r\n        !grid[row - 1][col].isVisited\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall &&\r\n        !grid[row][col - 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall &&\r\n        !grid[row][col + 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n","export function dfs(grid = [], startNode, finishNode) {\r\n    const stack = [];\r\n    const visitedNodesInOrder = [];\r\n\r\n    startNode.isVisited = true;\r\n    stack.push(startNode);\r\n\r\n    while (!!stack.length) {\r\n        let node = stack.pop();\r\n\r\n        if (finishNode === node)\r\n            return [visitedNodesInOrder, calculatePath(finishNode)];\r\n\r\n        if (node.isWall) continue;\r\n\r\n        const neighbors = getAllNeighbors(grid, node);\r\n\r\n        for (const neighbor of neighbors) {\r\n            neighbor.isVisited = true;\r\n            neighbor.previousNode = node;\r\n            visitedNodesInOrder.push(neighbor);\r\n            stack.push(neighbor);\r\n        }\r\n    }\r\n\r\n    return [visitedNodesInOrder, calculatePath(finishNode)];\r\n}\r\n\r\nfunction calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n\r\nfunction getAllNeighbors(grid = [], node) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n\r\n    const { row, col } = node;\r\n    const neighbors = [];\r\n\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isVisited &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall &&\r\n        !grid[row - 1][col].isVisited\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall &&\r\n        !grid[row][col - 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall &&\r\n        !grid[row][col + 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n","import { randomIntFromInterval } from \"./../../utils/randomIntFromInterval\";\r\n\r\nexport function astar(grid = [], startNode, finishNode) {\r\n  const closedlist = [];\r\n  const openlist = [];\r\n\r\n  startNode.cost = {\r\n    F: 0,\r\n    G: 0,\r\n    H: 0,\r\n  };\r\n\r\n  openlist.push(startNode);\r\n\r\n  while (!!openlist.length) {\r\n    openlist.sort((a, b) => a.cost.F - b.cost.F);\r\n    const current = openlist.shift();\r\n\r\n    closedlist.push(current);\r\n\r\n    if (current.isWall) continue;\r\n\r\n    if (current === finishNode) return [closedlist, calculatePath(finishNode)];\r\n\r\n    const neighbors = getNeighbors(grid, current);\r\n\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      const nNode = neighbors[i];\r\n      nNode.isVisited = true;\r\n      if (closedlist.includes(nNode)) continue;\r\n\r\n      var m = getCostFunction([\"E\", \"D\", \"M\"], 0);\r\n\r\n      nNode.cost.G = calculateCost(nNode, startNode, m);\r\n      nNode.cost.H = calculateCost(nNode, finishNode, m);\r\n\r\n      // Needs more research on calculateMinimumDistance function\r\n      //   nNode.cost.G = calculateMinimumDistance(nNode, startNode);\r\n      //   nNode.cost.H = calculateMinimumDistance(nNode, finishNode);\r\n\r\n      nNode.cost.F = nNode.cost.G + nNode.cost.H;\r\n\r\n      if (!openlist.includes(nNode)) {\r\n        nNode.previousNode = current;\r\n        openlist.push(nNode);\r\n      }\r\n    }\r\n  }\r\n  return [closedlist, calculatePath(finishNode)];\r\n}\r\n\r\n// Doesnt Always Guarantee Minimum Distance, Needs more planning\r\n// function calculateMinimumDistance(node1, node2) {\r\n//   var manhattan = calculateCost(node1, node2, \"M\");\r\n//   var diagonal = calculateCost(node1, node2, \"D\");\r\n//   var euclidean = calculateCost(node1, node2, \"E\");\r\n\r\n//   var temp = manhattan < diagonal ? manhattan : diagonal;\r\n//   return euclidean < temp ? euclidean : temp;\r\n// }\r\n\r\nfunction calculateCost(currentNode, node, distanceType) {\r\n  switch (distanceType) {\r\n    // Euclidean Distance\r\n    case \"E\":\r\n      return Math.floor(\r\n        Math.sqrt(\r\n          Math.pow(currentNode.row - node.row, 2) +\r\n            Math.pow(currentNode.col - node.col, 2)\r\n        ) * 10\r\n      );\r\n\r\n    // Manhattan Distance\r\n    case \"M\":\r\n      return (\r\n        Math.abs(currentNode.row - node.row) +\r\n        Math.abs(currentNode.col - node.col)\r\n      );\r\n\r\n    // Diagonal Distance\r\n    case \"D\":\r\n      return Math.max(\r\n        Math.abs(currentNode.row - node.row),\r\n        Math.abs(currentNode.col - node.col)\r\n      );\r\n    default:\r\n      return 0;\r\n  }\r\n}\r\n\r\nfunction getCostFunction(costs = [], type) {\r\n  if (type === 3) return costs[randomIntFromInterval(0, costs.length - 1)];\r\n  return costs[type];\r\n}\r\n\r\nfunction getNeighbors(grid = [], currentNode) {\r\n  const ROWS = grid.length;\r\n  const COLS = grid[0].length;\r\n  const { row, col } = currentNode;\r\n  const neighbors = [];\r\n\r\n  // Top, Left, Right, Bottom Nodes\r\n  if (\r\n    row + 1 >= 0 &&\r\n    row + 1 < ROWS &&\r\n    col >= 0 &&\r\n    col < COLS &&\r\n    !grid[row + 1][col].isWall\r\n  ) {\r\n    neighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (\r\n    row - 1 >= 0 &&\r\n    row - 1 < ROWS &&\r\n    col >= 0 &&\r\n    col < COLS &&\r\n    !grid[row - 1][col].isWall\r\n  ) {\r\n    neighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (\r\n    row >= 0 &&\r\n    row < ROWS &&\r\n    col - 1 >= 0 &&\r\n    col - 1 < COLS &&\r\n    !grid[row][col - 1].isWall\r\n  ) {\r\n    neighbors.push(grid[row][col - 1]);\r\n  }\r\n  if (\r\n    row >= 0 &&\r\n    row < ROWS &&\r\n    col + 1 >= 0 &&\r\n    col + 1 < COLS &&\r\n    !grid[row][col + 1].isWall\r\n  ) {\r\n    neighbors.push(grid[row][col + 1]);\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n\r\nfunction calculatePath(finishNode) {\r\n  const shortestPathNodes = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    shortestPathNodes.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return shortestPathNodes;\r\n}\r\n","export function bidirectionalSearch(grid = [], startNode, finishNode) {\r\n    const squeue = [];\r\n    const dqueue = [];\r\n\r\n    const svisited = [],\r\n        dvisited = [];\r\n\r\n    startNode.isVisited = true;\r\n    startNode.previousNode = null;\r\n    squeue.push(startNode);\r\n\r\n    finishNode.isVisited = true;\r\n    finishNode.previousNode = null;\r\n    dqueue.push(finishNode);\r\n\r\n    while (squeue.length && dqueue.length) {\r\n        const currsn = squeue.shift();\r\n        const currdn = dqueue.shift();\r\n\r\n        const sneighbors = getAllNeighbors(grid, currsn);\r\n        const dneighbors = getAllNeighbors(grid, currdn);\r\n\r\n        if (currdn === currsn) break;\r\n\r\n        for (const sneighbor of sneighbors) {\r\n            if (!sneighbor.isVisited) {\r\n                sneighbor.isVisited = true;\r\n                sneighbor.previousNode = currsn;\r\n                squeue.push(sneighbor);\r\n                svisited.push(sneighbor);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (const dneighbor of dneighbors) {\r\n            if (!dneighbor.isVisited) {\r\n                dneighbor.isVisited = true;\r\n                dneighbor.previousNode = currdn;\r\n                dqueue.push(dneighbor);\r\n                dvisited.push(dneighbor);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const sourcePaths = [],\r\n        destPaths = [];\r\n\r\n    for (let i = 0; i < svisited.length; i++)\r\n        sourcePaths.push(calculatePath(svisited[i]));\r\n\r\n    for (let i = 0; i < dvisited.length; i++)\r\n        destPaths.push(calculatePath(dvisited[i]));\r\n\r\n    for (let i = sourcePaths.length - 1; i >= 0; i--) {\r\n        const sPathRow = sourcePaths[i];\r\n        const splast = sPathRow[sPathRow.length - 1];\r\n        const neighbors = getAdjacents(grid, splast);\r\n        for (const neighbor of neighbors) {\r\n            for (let j = 0; j < destPaths.length; j++) {\r\n                const destPathRow = destPaths[j];\r\n                if (destPathRow.includes(neighbor)) {\r\n                    return [svisited, dvisited, sPathRow, destPathRow];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getAdjacents(grid = [], node) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n\r\n    const { row, col } = node;\r\n    const neighbors = [];\r\n\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n\r\nfunction getAllNeighbors(grid = [], node) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n\r\n    const { row, col } = node;\r\n    const neighbors = [];\r\n\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isVisited &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall &&\r\n        !grid[row - 1][col].isVisited\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall &&\r\n        !grid[row][col - 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall &&\r\n        !grid[row][col + 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n\r\nexport function calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n","import generate from \"@indutny/maze\";\r\n\r\nexport function generateMaze(grid = []) {\r\n    const ROW = grid.length,\r\n        COL = grid[0].length;\r\n\r\n    const maze = generate({ width: ROW, height: COL });\r\n\r\n    for (let i = 0; i < ROW; i++) {\r\n        for (let j = 0; j < COL; j++) {\r\n            const { row, col } = grid[i][j];\r\n            if (grid[i][j].isStart || grid[i][j].isFinish) {\r\n                if (row > 0) maze[row - 1][col] = 0;\r\n                if (row < ROW - 1) maze[row + 1][col] = 0;\r\n                if (col > 0) maze[row][col - 1] = 0;\r\n                if (col < COL - 1) maze[row][col + 1] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[0].length; j++) {\r\n            if (\r\n                !grid[i][j].isStart &&\r\n                !grid[i][j].isFinish &&\r\n                maze[i][j] === 1\r\n            ) {\r\n                grid[i][j].isWall = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return grid;\r\n}\r\n","function getNodeNeighbors(row, col, ROWS, COLS) {\r\n    const nodeArray = [];\r\n    for (let i = 0, j = 0; i < ROWS || j < COLS; i++, j++) {\r\n        nodeArray.push([row, i]);\r\n        nodeArray.push([j, col]);\r\n    }\r\n    return nodeArray;\r\n}\r\n\r\nexport function highlightGrid(row, col, ROWS, COLS) {\r\n    const nodeArray = getNodeNeighbors(row, col, ROWS, COLS);\r\n    for (const nodeVal of nodeArray) {\r\n        const [nRow, nCol] = nodeVal;\r\n        const node = document.getElementById(`node-${nRow}-${nCol}`);\r\n\r\n        if (nRow === parseInt(ROWS / 2)) {\r\n            node.classList.add(\"plus-center\");\r\n        } else {\r\n            node.classList.add(\"plus\");\r\n        }\r\n\r\n        if (nCol === parseInt(COLS / 2)) {\r\n            node.classList.add(\"plus-center\");\r\n        } else {\r\n            node.classList.add(\"plus\");\r\n        }\r\n    }\r\n}\r\n\r\nexport function unHighlightGrid(row, col, ROWS, COLS) {\r\n    const nodeArray = getNodeNeighbors(row, col, ROWS, COLS);\r\n    for (const nodeVal of nodeArray) {\r\n        const [nRow, nCol] = nodeVal;\r\n        const node = document.getElementById(`node-${nRow}-${nCol}`);\r\n\r\n        if (nRow === parseInt(ROWS / 2)) {\r\n            node.classList.remove(\"plus-center\");\r\n        } else {\r\n            node.classList.remove(\"plus\");\r\n        }\r\n\r\n        if (nCol === parseInt(COLS / 2)) {\r\n            node.classList.remove(\"plus-center\");\r\n        } else {\r\n            node.classList.remove(\"plus\");\r\n        }\r\n    }\r\n}\r\n\r\nexport function highlightGridDiagonals(nodes = [], ROWS, COLS) {\r\n    for (let i = 0; i < ROWS; i++) {\r\n        for (let j = 0; j < COLS; j++) {\r\n            const { row, col } = nodes[i][j];\r\n            if (row === col) {\r\n                document\r\n                    .getElementById(`node-${row}-${col}`)\r\n                    .classList.add(\"plus-center\");\r\n            }\r\n        }\r\n    }\r\n    for (let i = ROWS - 1; i >= 0; i--) {\r\n        for (let j = 0; j < COLS; j++) {\r\n            if (i + j === parseInt((ROWS - 1 + COLS) / 2)) {\r\n                document\r\n                    .getElementById(`node-${i}-${j}`)\r\n                    .classList.add(\"plus-center\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function unHighlightGridDiagonals(nodes = [], ROWS, COLS) {\r\n    for (let i = 0; i < ROWS; i++) {\r\n        for (let j = 0; j < COLS; j++) {\r\n            const { row, col } = nodes[i][j];\r\n            if (row === col) {\r\n                document\r\n                    .getElementById(`node-${row}-${col}`)\r\n                    .classList.remove(\"plus-center\");\r\n            }\r\n        }\r\n    }\r\n    for (let i = ROWS - 1; i >= 0; i--) {\r\n        for (let j = 0; j < COLS; j++) {\r\n            if (i + j === parseInt((ROWS - 1 + COLS) / 2)) {\r\n                document\r\n                    .getElementById(`node-${i}-${j}`)\r\n                    .classList.remove(\"plus-center\");\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst borderStyles = { border: \"1px solid #f0f0f0\" };\r\n\r\nconst Legend = () => (\r\n    <div id=\"legend\" className=\"bg-dark shadowT rounded\">\r\n        <div id=\"legendRow\" className=\"row p-2\">\r\n            <div className=\"col-6\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <div\r\n                            style={borderStyles}\r\n                            className=\"legend mt-1 legend-start\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"col-10 nmt-5\">\r\n                        <div className=\"text-light font-weight-bold legend-label\">\r\n                            Source\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-2\">\r\n                        <div\r\n                            style={borderStyles}\r\n                            className=\"legend mt-1 legend-wall\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"col-10 nmt-5\">\r\n                        <div className=\"text-light font-weight-bold legend-label\">\r\n                            Wall\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-2\">\r\n                        <div\r\n                            style={borderStyles}\r\n                            className=\"legend mt-1 legend-visited\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"col-10 nmt-5\">\r\n                        <div className=\"text-light font-weight-bold legend-label\">\r\n                            Visited\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-6\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <div\r\n                            style={borderStyles}\r\n                            className=\"legend mt-1 legend-finish\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"col-10 nmt-5\">\r\n                        <div className=\"text-light font-weight-bold legend-label\">\r\n                            Destination\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-2\">\r\n                        <div\r\n                            style={borderStyles}\r\n                            className=\"legend mt-1 legend-path\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"col-10 nmt-5\">\r\n                        <div className=\"text-light font-weight-bold legend-label\">\r\n                            Node\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Legend;\r\n","/**\r\n * @author Dipesh Vinod Patil <thedipeshpatil@gmail.com>\r\n */\r\n\r\nimport React from \"react\";\r\n\r\n//  Importing Node Component to display Node on Grid\r\nimport Node from \"./Node/Node\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\n\r\n//  Pathfinder Algorithms\r\nimport { dijkstra } from \"./pathFindingAlgorithms/dijkstra\";\r\nimport { bfs } from \"./pathFindingAlgorithms/breadthFirstSearch\";\r\nimport { dfs } from \"./pathFindingAlgorithms/depthFirstSearch\";\r\nimport { astar } from \"./pathFindingAlgorithms/astar\";\r\nimport { bidirectionalSearch } from \"./pathFindingAlgorithms/bidirectionalSearch\";\r\n\r\n//  Maze Generation Algorithm\r\nimport { generateMaze } from \"./generateMaze\";\r\n\r\nimport BackBar from \"./../utils/backbar\";\r\n\r\n//  Highlight Board Functions\r\nimport {\r\n    highlightGrid,\r\n    unHighlightGrid,\r\n    highlightGridDiagonals,\r\n    unHighlightGridDiagonals,\r\n} from \"./pathfinder-utils/highlightMazeNodes\";\r\n\r\n//  Legend Component\r\nimport Legend from \"./pathfinder-utils/legend\";\r\n\r\n//  Complexity table\r\nimport ComplexityTable from \"./pathfinder-utils/complexityTable\";\r\n\r\n//  Stylesheets\r\nimport \"./pathfinderVisualiser.css\";\r\n\r\n//  Constants to toggle Start/Finish/Wall on Grid\r\nconst START_NODE_STATE = 1;\r\nconst END_NODE_STATE = 2;\r\nconst WALL_NODE_STATE = 3;\r\n\r\nconst START = \"START\";\r\nconst FINISH = \"FINISH\";\r\n\r\n// Speed Factor\r\nvar SPEED;\r\n\r\n// Screen Resolution\r\nvar SCREEN_WIDTH = window.screen.width;\r\nvar ROWS, COLS;\r\n\r\n// Adjusting the Grid according to Screen Width\r\n// For better responsiveness and interactivity.\r\nif (SCREEN_WIDTH > 1440 && SCREEN_WIDTH <= 2560) {\r\n    // TVs and Large Screen Laptops\r\n    ROWS = 61;\r\n    COLS = 61;\r\n    SPEED = 10;\r\n} else if (SCREEN_WIDTH >= 768 && SCREEN_WIDTH <= 1440) {\r\n    // Laptops & Tablets\r\n    ROWS = 53;\r\n    COLS = 53;\r\n    SPEED = 15;\r\n} else if (SCREEN_WIDTH > 425 && SCREEN_WIDTH <= 767) {\r\n    // IPads and Smaller Laptops\r\n    ROWS = 47;\r\n    COLS = 47;\r\n    SPEED = 20;\r\n} else if (SCREEN_WIDTH >= 320 && SCREEN_WIDTH <= 425) {\r\n    // Mobile Devices\r\n    ROWS = 37;\r\n    COLS = 37;\r\n    SPEED = 25;\r\n} else if (SCREEN_WIDTH >= 120 && SCREEN_WIDTH <= 319) {\r\n    // Mobile Devices with Smaller Screens\r\n    ROWS = 21;\r\n    COLS = 21;\r\n    SPEED = 25;\r\n} else {\r\n    // Default Case\r\n    ROWS = 41;\r\n    COLS = 41;\r\n    SPEED = 18;\r\n}\r\n\r\nconsole.log(`Rows: ${ROWS}, Cols: ${COLS}`);\r\n\r\nexport default class PathFinderVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            modifyingNodeState: 0,\r\n            START_NODE_ROW: 2,\r\n            START_NODE_COL: 2,\r\n            FINISH_NODE_ROW: ROWS - 3,\r\n            FINISH_NODE_COL: COLS - 3,\r\n\r\n            disableMazesButton: false,\r\n            disableNodesButton: false,\r\n            disableClearMazeButton: false,\r\n            disableClearPathButton: false,\r\n            disableAlgoDropdown: false,\r\n            disablePerformButton: false,\r\n\r\n            highlightMazeNodes: true,\r\n            isGridDiagonalsHighlighted: false,\r\n            speed: SPEED,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setUpGrid();\r\n        this.setState({\r\n            disableClearMazeButton: true,\r\n            disableClearPathButton: true,\r\n        });\r\n    }\r\n\r\n    setUpGrid() {\r\n        const gridBox = document.getElementById(\"grid\");\r\n        gridBox.style.setProperty(\"--p-grid-rows\", ROWS);\r\n        gridBox.style.setProperty(\"--p-grid-cols\", COLS);\r\n\r\n        const grid = new Array(COLS);\r\n\r\n        for (let i = 0; i < ROWS; i++) {\r\n            grid[i] = new Array(ROWS);\r\n            for (let j = 0; j < COLS; j++) {\r\n                grid[i][j] = this.createNode(i, j);\r\n            }\r\n        }\r\n\r\n        this.setState({ grid });\r\n    }\r\n\r\n    createNode(row, col) {\r\n        const {\r\n            START_NODE_ROW,\r\n            START_NODE_COL,\r\n            FINISH_NODE_ROW,\r\n            FINISH_NODE_COL,\r\n        } = this.state;\r\n        return {\r\n            row,\r\n            col,\r\n            isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n            isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n            distance: Infinity,\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n            cost: {\r\n                F: Infinity,\r\n                G: Infinity,\r\n                H: Infinity,\r\n            },\r\n        };\r\n    }\r\n\r\n    clearBoard() {\r\n        this.setUpGrid();\r\n        const grid = this.state.grid;\r\n        for (let i = 0; i < grid.length; i++) {\r\n            for (let j = 0; j < grid[0].length; j++) {\r\n                const node = grid[i][j];\r\n                document\r\n                    .getElementById(`node-${node.row}-${node.col}`)\r\n                    .classList.remove(\"node-visited\");\r\n                document\r\n                    .getElementById(`node-${node.row}-${node.col}`)\r\n                    .classList.remove(\"node-shortest-path\");\r\n            }\r\n        }\r\n        this.setState({\r\n            disableMazesButton: false,\r\n            disableNodesButton: false,\r\n            disableClearPathButton: true,\r\n            disableClearMazeButton: true,\r\n            disableAlgoDropdown: false,\r\n            disablePerformButton: false,\r\n            highlightMazeNodes: true,\r\n        });\r\n    }\r\n\r\n    clearPath() {\r\n        const { grid } = this.state;\r\n        const temp = grid.slice();\r\n        for (let i = 0; i < temp.length; i++) {\r\n            for (let j = 0; j < temp[i].length; j++) {\r\n                let node = temp[i][j];\r\n                if (node.isVisited) {\r\n                    node.isVisited = false;\r\n                    document\r\n                        .getElementById(`node-${node.row}-${node.col}`)\r\n                        .classList.remove(\"node-visited\");\r\n                    document\r\n                        .getElementById(`node-${node.row}-${node.col}`)\r\n                        .classList.remove(\"node-shortest-path\");\r\n                }\r\n            }\r\n        }\r\n        this.setState({\r\n            disableMazesButton: true,\r\n            disableNodesButton: true,\r\n            disableAlgoDropdown: false,\r\n            disablePerformButton: false,\r\n            highlightMazeNodes: true,\r\n        });\r\n    }\r\n\r\n    highlightNodes(row, col) {\r\n        if (this.state.highlightMazeNodes) highlightGrid(row, col, ROWS, COLS);\r\n    }\r\n\r\n    unHighlightNodes(row, col) {\r\n        if (this.state.highlightMazeNodes)\r\n            unHighlightGrid(row, col, ROWS, COLS);\r\n    }\r\n\r\n    // change `isGridDiagonalsHighlighted` to true in state\r\n    // to highlight diagonals on board\r\n\r\n    highlightDiagonals() {\r\n        if (this.state.isGridDiagonalsHighlighted)\r\n            highlightGridDiagonals(this.state.grid, ROWS, COLS);\r\n    }\r\n\r\n    unHighlightDiagonals() {\r\n        if (this.state.isGridDiagonalsHighlighted)\r\n            unHighlightGridDiagonals(this.state.grid, ROWS, COLS);\r\n    }\r\n\r\n    handleNodeOperations(row, col, NODE_STATE) {\r\n        const {\r\n            START_NODE_ROW,\r\n            START_NODE_COL,\r\n            FINISH_NODE_ROW,\r\n            FINISH_NODE_COL,\r\n            grid,\r\n        } = this.state;\r\n        switch (NODE_STATE) {\r\n            case 1:\r\n                if (\r\n                    this.toggleStartOrFinish(\r\n                        grid,\r\n                        row,\r\n                        col,\r\n                        START_NODE_ROW,\r\n                        START_NODE_COL,\r\n                        START\r\n                    )\r\n                ) {\r\n                    this.setState({\r\n                        START_NODE_ROW: row,\r\n                        START_NODE_COL: col,\r\n                    });\r\n                }\r\n                break;\r\n            case 2:\r\n                if (\r\n                    this.toggleStartOrFinish(\r\n                        grid,\r\n                        row,\r\n                        col,\r\n                        FINISH_NODE_ROW,\r\n                        FINISH_NODE_COL,\r\n                        FINISH\r\n                    )\r\n                ) {\r\n                    this.setState({\r\n                        FINISH_NODE_ROW: row,\r\n                        FINISH_NODE_COL: col,\r\n                    });\r\n                }\r\n                break;\r\n            case 3:\r\n                this.toggleWall(grid, row, col);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    toggleStartOrFinish(grid = [], row, col, NODE_ROW, NODE_COL, nodeType) {\r\n        const newGrid = grid.slice();\r\n\r\n        const currentNode = newGrid[NODE_ROW][NODE_COL];\r\n        const newNode = newGrid[row][col];\r\n\r\n        if (nodeType === \"START\") {\r\n            if (newNode.isWall || newNode.isFinish) {\r\n                return false;\r\n            } else {\r\n                currentNode.isStart = false;\r\n                newNode.isStart = true;\r\n                this.setState({\r\n                    grid: newGrid,\r\n                });\r\n                return true;\r\n            }\r\n        } else if (nodeType === \"FINISH\") {\r\n            if (newNode.isWall || newNode.isStart) {\r\n                return false;\r\n            } else {\r\n                currentNode.isFinish = false;\r\n                newNode.isFinish = true;\r\n                this.setState({\r\n                    grid: newGrid,\r\n                });\r\n                return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    toggleWall(grid, row, col) {\r\n        const newGrid = grid.slice();\r\n        const currentNode = newGrid[row][col];\r\n        if (!currentNode.isFinish && !currentNode.isStart) {\r\n            currentNode.isWall = !currentNode.isWall;\r\n            this.setState({ grid: newGrid });\r\n        }\r\n    }\r\n\r\n    generateMaze(grid = []) {\r\n        this.setState({\r\n            disableMazesButton: true,\r\n            disableClearPathButton: true,\r\n            disableClearMazeButton: false,\r\n        });\r\n        const mazeGrid = generateMaze(grid);\r\n        this.setState({ grid: mazeGrid });\r\n    }\r\n\r\n    modifyNodeState(STATE) {\r\n        this.setState({ modifyingNodeState: STATE });\r\n    }\r\n\r\n    selectAlgorithm() {\r\n        const algorithm = parseInt(\r\n            document.getElementById(\"pathFindingAlgoDropDown\").value\r\n        );\r\n        if (algorithm !== 0) this.visualiseAlgorithms(algorithm);\r\n        else {\r\n            alert(\"Select an Algorithm first!\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    visualiseAlgorithms(algorithm) {\r\n        this.setState({\r\n            disableNodesButton: true,\r\n            disableMazesButton: true,\r\n            disableClearMazeButton: true,\r\n            disableClearPathButton: true,\r\n            disableAlgoDropdown: true,\r\n            disablePerformButton: true,\r\n            modifyingNodeState: 0,\r\n        });\r\n        const {\r\n            grid,\r\n            START_NODE_COL,\r\n            START_NODE_ROW,\r\n            FINISH_NODE_COL,\r\n            FINISH_NODE_ROW,\r\n        } = this.state;\r\n\r\n        const STARTNODE = grid[START_NODE_ROW][START_NODE_COL];\r\n        const FINISHNODE = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n\r\n        var visitedNodesInOrder, nodesInShortestPathOrder;\r\n\r\n        switch (algorithm) {\r\n            case 0:\r\n                alert(\"Select an algorithm first!\");\r\n                this.setState({\r\n                    disableMazesButton: false,\r\n                    disableNodesButton: false,\r\n                });\r\n                return;\r\n            case 1:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = dijkstra(\r\n                    grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            case 2:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = bfs(\r\n                    grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            case 3:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = astar(\r\n                    grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            case 4:\r\n                const [source_visited, dest_visited, sPathNodes, dPathNodes] =\r\n                    bidirectionalSearch(grid, STARTNODE, FINISHNODE);\r\n                this.animatePath(source_visited, sPathNodes);\r\n                this.animatePath(dest_visited, dPathNodes);\r\n                return;\r\n            case 5:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = dfs(\r\n                    grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        this.animatePath(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n\r\n    animatePath(visitedNodesInOrder = [], nodesInShortestPathOrder = []) {\r\n        this.setState({ disableNodesButton: true, highlightMazeNodes: false });\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, SPEED * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                if (!node.isStart && !node.isFinish && !node.isWall) {\r\n                    document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).className = \"node node-visited\";\r\n                }\r\n            }, SPEED * i);\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder = []) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                if (!node.isStart && !node.isFinish && !node.isWall) {\r\n                    document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).classList = \"node node-shortest-path\";\r\n                }\r\n                if (node.isFinish) {\r\n                    setTimeout(() => {\r\n                        this.setState({\r\n                            disableClearMazeButton: false,\r\n                            disableClearPathButton: false,\r\n                        });\r\n                    }, 1000);\r\n                }\r\n            }, SPEED * 1.4 * i);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            grid,\r\n            modifyingNodeState,\r\n            disableMazesButton,\r\n            disableNodesButton,\r\n            disableClearMazeButton,\r\n            disableClearPathButton,\r\n            disableAlgoDropdown,\r\n            disablePerformButton,\r\n        } = this.state;\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-1\"></div>\r\n                        <div className=\"col-sm-7\">\r\n                            <div className=\"mt-2\">\r\n                                <div className=\"box_p rounded shadowT\">\r\n                                    <div\r\n                                        onMouseOut={() =>\r\n                                            this.unHighlightDiagonals()\r\n                                        }\r\n                                        onMouseOver={() =>\r\n                                            this.highlightDiagonals()\r\n                                        }\r\n                                        id=\"grid\"\r\n                                        className=\"grid\"\r\n                                    >\r\n                                        {grid.map((node, idx) => {\r\n                                            return node.map((cell, idx) => {\r\n                                                const {\r\n                                                    row,\r\n                                                    col,\r\n                                                    isStart,\r\n                                                    isFinish,\r\n                                                    isWall,\r\n                                                } = cell;\r\n                                                return (\r\n                                                    <Node\r\n                                                        key={`${row}-${col}`}\r\n                                                        col={col}\r\n                                                        isFinish={isFinish}\r\n                                                        isStart={isStart}\r\n                                                        isWall={isWall}\r\n                                                        row={row}\r\n                                                        onNodeClick={(\r\n                                                            row,\r\n                                                            col\r\n                                                        ) =>\r\n                                                            this.handleNodeOperations(\r\n                                                                row,\r\n                                                                col,\r\n                                                                modifyingNodeState\r\n                                                            )\r\n                                                        }\r\n                                                        onNodeOver={(\r\n                                                            row,\r\n                                                            col\r\n                                                        ) =>\r\n                                                            this.highlightNodes(\r\n                                                                row,\r\n                                                                col\r\n                                                            )\r\n                                                        }\r\n                                                        onNodeOut={(row, col) =>\r\n                                                            this.unHighlightNodes(\r\n                                                                row,\r\n                                                                col\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                );\r\n                                            });\r\n                                        })}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-3 mt-2\">\r\n                            <div className=\"btn-group btn-block\">\r\n                                <Button\r\n                                    disabled={disableNodesButton}\r\n                                    variant=\"danger\"\r\n                                    onClick={() =>\r\n                                        this.modifyNodeState(START_NODE_STATE)\r\n                                    }\r\n                                >\r\n                                    Source\r\n                                </Button>\r\n                                <Button\r\n                                    disabled={disableNodesButton}\r\n                                    variant=\"success\"\r\n                                    onClick={() =>\r\n                                        this.modifyNodeState(END_NODE_STATE)\r\n                                    }\r\n                                >\r\n                                    Destination\r\n                                </Button>\r\n                                <Button\r\n                                    disabled={disableNodesButton}\r\n                                    variant=\"dark\"\r\n                                    onClick={() =>\r\n                                        this.modifyNodeState(WALL_NODE_STATE)\r\n                                    }\r\n                                >\r\n                                    Toggle Wall\r\n                                </Button>\r\n                            </div>\r\n                            <div className=\"btn-group btn-block mt-2\">\r\n                                <Button\r\n                                    disabled={disableMazesButton}\r\n                                    variant=\"secondary\"\r\n                                    onClick={() => this.generateMaze(grid)}\r\n                                >\r\n                                    Generate Maze\r\n                                </Button>\r\n                                <Button\r\n                                    disabled={disableClearMazeButton}\r\n                                    variant=\"danger\"\r\n                                    onClick={() => this.clearBoard()}\r\n                                >\r\n                                    Clear Maze\r\n                                </Button>\r\n                                <Button\r\n                                    disabled={disableClearPathButton}\r\n                                    variant=\"primary\"\r\n                                    onClick={() => this.clearPath()}\r\n                                >\r\n                                    Clear Path\r\n                                </Button>\r\n                            </div>\r\n                            <div className=\"btn-group btn-block mt-2\">\r\n                                <InputGroup>\r\n                                    <Form.Control\r\n                                        disabled={disableAlgoDropdown}\r\n                                        id=\"pathFindingAlgoDropDown\"\r\n                                        defaultValue=\"0\"\r\n                                        as=\"select\"\r\n                                    >\r\n                                        <option disabled value=\"0\">\r\n                                            Select Algorithm\r\n                                        </option>\r\n                                        <option value=\"1\">Dijkstras</option>\r\n                                        <option value=\"2\">\r\n                                            Breadth First Search\r\n                                        </option>\r\n                                        <option value=\"5\">\r\n                                            Depth First Search\r\n                                        </option>\r\n                                        <option value=\"3\">A* Search</option>\r\n                                        <option value=\"4\">\r\n                                            Bi-Directional Search\r\n                                        </option>\r\n                                    </Form.Control>\r\n                                    <InputGroup.Append>\r\n                                        <Button\r\n                                            onClick={() =>\r\n                                                this.selectAlgorithm()\r\n                                            }\r\n                                            disabled={disablePerformButton}\r\n                                            variant=\"success\"\r\n                                        >\r\n                                            Perform Search\r\n                                        </Button>\r\n                                    </InputGroup.Append>\r\n                                </InputGroup>\r\n                            </div>\r\n                            <Legend />\r\n                            <ComplexityTable />\r\n                        </div>\r\n                        <div className=\"col-sm-1\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst ComplexityTable = () => (\r\n    <div id=\"complexityTableP\">\r\n        <table className=\"table-bordered table table-striped text-center mt-2  table-dark\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Algorithm</th>\r\n                    <th>Time</th>\r\n                    <th>Space</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td className=\"text-warning\">Dijkstras</td>\r\n                    <td>O(E + V&times;LogV)</td>\r\n                    <td>O(V)</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-warning\">BFS</td>\r\n                    <td>\r\n                        O(V + E) = O(b<sup>d</sup>)\r\n                    </td>\r\n                    <td>\r\n                        O(V) = O(b<sup>d</sup>)\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-warning\">DFS</td>\r\n                    <td>\r\n                        O(V + E) = O(b<sup>d</sup>)\r\n                    </td>\r\n                    <td>\r\n                        O(V) = O(b<sup>d</sup>)\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-warning\">A* Search</td>\r\n                    <td>O(E)</td>\r\n                    <td>O(V)</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-warning\">Bi-Directional Search</td>\r\n                    <td>\r\n                        O(b<sup>d/2</sup>)\r\n                    </td>\r\n                    <td>\r\n                        O(b<sup>d/2</sup>)\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nexport default ComplexityTable;\r\n","import React from \"react\";\r\n\r\nconst ComplexityTable = () => (\r\n    <div id=\"complexityTable\">\r\n        <table className=\"table-bordered table table-striped text-center rounded-b mt-2 shadowT table-dark\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Algorithm</th>\r\n                    <th colSpan=\"2\">Time</th>\r\n                    <th>Space</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Case: </td>\r\n                    <td className=\"text-success table-success\">Best</td>\r\n                    <td className=\"text-danger table-danger\">Worst</td>\r\n                    <td></td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-warning\">Heap Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-warning\">Merge Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-warning\">Quick Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>Log N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-warning\">Bubble Sort</td>\r\n                    <td>N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-warning\">Insertion Sort</td>\r\n                    <td>N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-warning\">Selection Sort</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nexport default ComplexityTable;\r\n","export function swap(i, j, arr = []) {\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n","import { swap } from \"./swap\";\r\n\r\nfunction quickSortHelper(array = [], left, right, animations = []) {\r\n    let pivot = array[Math.floor((right + left) / 2)],\r\n        i = left,\r\n        j = right;\r\n    while (i <= j) {\r\n        while (array[i] < pivot) i++;\r\n\r\n        while (array[j] > pivot) j--;\r\n\r\n        if (i <= j) {\r\n            swap(i, j, array);\r\n            animations.push([i, j, array[i++], array[j--]]);\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nexport function getQuickSortAnimations(\r\n    items = [],\r\n    left,\r\n    right,\r\n    animations = []\r\n) {\r\n    let index;\r\n    if (items.length > 1) {\r\n        index = quickSortHelper(items, left, right, animations);\r\n        if (left < index - 1) {\r\n            getQuickSortAnimations(items, left, index - 1, animations);\r\n        }\r\n        if (index < right) {\r\n            getQuickSortAnimations(items, index, right, animations);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n","function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(\r\n        auxiliaryArray,\r\n        middleIdx + 1,\r\n        endIdx,\r\n        mainArray,\r\n        animations\r\n    );\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n","import { swap } from \"./swap\";\r\n\r\nfunction buildMaxHeap(array = [], animations = []) {\r\n  let i;\r\n  i = array.length / 2 - 1;\r\n  i = Math.floor(i);\r\n  while (i >= 0) {\r\n    heapify(array, i, array.length, animations);\r\n    i -= 1;\r\n  }\r\n}\r\n\r\nfunction heapify(heap = [], i, max, animations = []) {\r\n  let index, leftChild, righChild;\r\n\r\n  while (i < max) {\r\n    index = i;\r\n    leftChild = 2 * i + 1;\r\n    righChild = leftChild + 1;\r\n\r\n    if (leftChild < max && heap[leftChild] > heap[index]) index = leftChild;\r\n\r\n    if (righChild < max && heap[righChild] > heap[index]) index = righChild;\r\n\r\n    if (index === i) return;\r\n\r\n    swap(i, index, heap);\r\n    animations.push([i, index, heap[i], heap[index]]);\r\n    i = index;\r\n  }\r\n}\r\n\r\nexport function getHeapSortAnimations(array = [], animations = []) {\r\n  buildMaxHeap(array, animations);\r\n  let lastElement = array.length - 1;\r\n  while (lastElement > 0) {\r\n    swap(0, lastElement, array);\r\n    animations.push([0, lastElement, array[0], array[lastElement]]);\r\n    heapify(array, 0, lastElement, animations);\r\n    lastElement -= 1;\r\n  }\r\n}\r\n","const cellColors = [\r\n    [\r\n        \"#040C12\",\r\n        \"#081925\",\r\n        \"#0C2637\",\r\n        \"#10334A\",\r\n        \"#14405C\",\r\n        \"#184C6F\",\r\n        \"#1C5981\",\r\n        \"#206694\",\r\n        \"#2473A6\",\r\n        \"#2980B9\",\r\n        \"#3E8CC0\",\r\n        \"#5399C7\",\r\n        \"#69A6CE\",\r\n        \"#7EB2D5\",\r\n        \"#94BFDC\",\r\n        \"#A9CCE3\",\r\n        \"#BED8EA\",\r\n        \"#D4E5F1\",\r\n        \"#E9F2F8\",\r\n    ],\r\n    [\r\n        \"#180308\",\r\n        \"#300610\",\r\n        \"#480918\",\r\n        \"#600C21\",\r\n        \"#780F29\",\r\n        \"#901231\",\r\n        \"#A8153A\",\r\n        \"#C01842\",\r\n        \"#D81B4A\",\r\n        \"#F01F53\",\r\n        \"#F13564\",\r\n        \"#F34B75\",\r\n        \"#F46286\",\r\n        \"#F67897\",\r\n        \"#F78FA9\",\r\n        \"#F9A5BA\",\r\n        \"#FABBCB\",\r\n        \"#FCD2DC\",\r\n        \"#FDE8ED\",\r\n    ],\r\n    [\r\n        \"#180C03\",\r\n        \"#301906\",\r\n        \"#482609\",\r\n        \"#60330C\",\r\n        \"#78400F\",\r\n        \"#904D12\",\r\n        \"#A85A15\",\r\n        \"#C06718\",\r\n        \"#D8741B\",\r\n        \"#F0811F\",\r\n        \"#F18D35\",\r\n        \"#F39A4B\",\r\n        \"#F4A662\",\r\n        \"#F6B378\",\r\n        \"#F7C08F\",\r\n        \"#F9CCA5\",\r\n        \"#FAD9BB\",\r\n        \"#FCE5D2\",\r\n        \"#FDF2E8\",\r\n    ],\r\n    [\r\n        \"#0D0118\",\r\n        \"#1A0231\",\r\n        \"#27034A\",\r\n        \"#340463\",\r\n        \"#41067C\",\r\n        \"#4E0795\",\r\n        \"#5B08AE\",\r\n        \"#6809C7\",\r\n        \"#750AE0\",\r\n        \"#820CF9\",\r\n        \"#8E24F9\",\r\n        \"#9B3CFA\",\r\n        \"#A754FA\",\r\n        \"#B46DFB\",\r\n        \"#C085FC\",\r\n        \"#CD9DFC\",\r\n        \"#D9B6FD\",\r\n        \"#E6CEFD\",\r\n        \"#F2E6FE\",\r\n    ],\r\n];\r\n\r\nexport default cellColors;\r\n","import React from \"react\";\r\n\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nimport { randomIntFromInterval } from \"../utils/randomIntFromInterval\";\r\nimport ComplexityTable from \"./complexityTable\";\r\n\r\n//  Sorting Algorithms\r\nimport { getBubbleSortAnimations } from \"./sortingAlgorithms/bubbleSort\";\r\nimport { getInsertionSortAnimations } from \"./sortingAlgorithms/insertionSort\";\r\nimport { getSelectionSortAnimations } from \"./sortingAlgorithms/selectionSort\";\r\nimport { getQuickSortAnimations } from \"./sortingAlgorithms/quickSort\";\r\nimport { getMergeSortAnimations } from \"./sortingAlgorithms/mergeSort\";\r\nimport { getHeapSortAnimations } from \"./sortingAlgorithms/heapSort\";\r\n\r\nimport cellColors from \"./cellColors\";\r\n\r\n// Stylesheets\r\nimport \"./sortingVisualiser.css\";\r\n\r\nimport BackBar from \"./../utils/backbar\";\r\n\r\nvar SELECTED = randomIntFromInterval(0, cellColors.length - 1);\r\nconst color = cellColors[SELECTED].reverse();\r\n\r\nconst SIZE_OF_BOARD = 25; // Size of Board -> N x N Size of 1D Array\r\nvar ANIMATION_SPEED = 0.5; // Greater Value -> Slower Animation\r\nconst CELL_CORNER_BORDER_RADIUS = 3;\r\n\r\nexport default class SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            disabled: false,\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < SIZE_OF_BOARD * SIZE_OF_BOARD; i++) {\r\n            let val = randomIntFromInterval(0, color.length - 1);\r\n            array.push(val);\r\n        }\r\n        this.setState({ array });\r\n        this.drawBoard(array);\r\n    }\r\n\r\n    drawBoard(arrayBoard = []) {\r\n        document.getElementById(\"sortingBoard\").innerHTML = \"\";\r\n        // creating the board\r\n        const container = document.getElementById(\"sortingBoard\");\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--grid-rows\", SIZE_OF_BOARD);\r\n        container.style.setProperty(\"--grid-cols\", SIZE_OF_BOARD);\r\n        // Adding cells to the board\r\n        for (let j = 0; j < arrayBoard.length; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            container.appendChild(cell).className = \"grid-item\";\r\n            let cellStyle = cell.style;\r\n            cellStyle.backgroundColor = color[arrayBoard[j]];\r\n\r\n            // styling the corners\r\n            if (j === 0) {\r\n                cellStyle.borderTopLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderTopRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderBottomRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * (SIZE_OF_BOARD - 1)) {\r\n                cellStyle.borderBottomLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            }\r\n        }\r\n    }\r\n\r\n    selectAlgorithm() {\r\n        let selectedValue = parseInt(\r\n            document.getElementById(\"sortingAlgoDropDown\").value\r\n        );\r\n        switch (selectedValue) {\r\n            case 0:\r\n                alert(\"Select An Algorithm First!\");\r\n                break;\r\n            case 1:\r\n                this.bubbleSort();\r\n                break;\r\n            case 2:\r\n                this.selectionSort();\r\n                break;\r\n            case 3:\r\n                this.insertionSort();\r\n                break;\r\n            case 4:\r\n                this.quickSort();\r\n                break;\r\n            case 5:\r\n                this.heapSort();\r\n                break;\r\n            case 6:\r\n                this.mergeSort();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    visualiseAnimations(animations = [], speedFactor) {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            let count = 0;\r\n            for (let i = 0; i < animations.length; i++) {\r\n                const [idxOne, idxTwo, elemOne, elemTwo] = animations[i];\r\n                const blockOne = arrayBlocks[idxOne];\r\n                const blockTwo = arrayBlocks[idxTwo];\r\n                const blockOneStyle = blockOne.style;\r\n                const blockTwoStyle = blockTwo.style;\r\n\r\n                setTimeout(() => {\r\n                    blockOneStyle.backgroundColor = color[elemOne];\r\n                    blockTwoStyle.backgroundColor = color[elemTwo];\r\n\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                    blockTwoStyle.transition = \"150ms all\";\r\n                }, ANIMATION_SPEED * speedFactor * (i + 1));\r\n                count++;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * speedFactor * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    mergeSort() {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const animations = getMergeSortAnimations(this.state.array);\r\n            let count = 0;\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            for (let i = 0; i < animations.length; i++) {\r\n                setTimeout(() => {\r\n                    const [blockOneIdx, newColor] = animations[i];\r\n                    const blockOneStyle = arrayBlocks[blockOneIdx].style;\r\n                    blockOneStyle.backgroundColor = color[newColor];\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                }, i * ANIMATION_SPEED);\r\n                count++;\r\n            }\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = [];\r\n        getQuickSortAnimations(\r\n            this.state.array,\r\n            0,\r\n            this.state.array.length - 1,\r\n            animations\r\n        );\r\n        this.visualiseAnimations(animations, 3.5);\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.4);\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = getInsertionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.8);\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = getSelectionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 50);\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = [];\r\n        getHeapSortAnimations(this.state.array, animations);\r\n        this.visualiseAnimations(animations, 2);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-1\"></div>\r\n                        <div className=\"col-sm-7\">\r\n                            <div\r\n                                className=\"box shadowT board mt-2\"\r\n                                id=\"sortingBoard\"\r\n                            ></div>\r\n                        </div>\r\n                        <div className=\"col-sm-3 mt-2\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <Button\r\n                                        onClick={() => this.resetArray()}\r\n                                        variant=\"danger\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Reset\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <Form.Control\r\n                                    id=\"sortingAlgoDropDown\"\r\n                                    disabled={disabled}\r\n                                    defaultValue=\"0\"\r\n                                    as=\"select\"\r\n                                >\r\n                                    <option disabled value=\"0\">\r\n                                        Algorithm\r\n                                    </option>\r\n                                    <option value=\"1\">Bubble Sort</option>\r\n                                    <option value=\"2\">Selection Sort</option>\r\n                                    <option value=\"3\">Insertion Sort</option>\r\n                                    <option value=\"4\">Quick Sort</option>\r\n                                    <option value=\"5\">Heap Sort</option>\r\n                                    <option value=\"6\">Merge Sort</option>\r\n                                </Form.Control>\r\n                                <InputGroup.Append>\r\n                                    <Button\r\n                                        onClick={() => this.selectAlgorithm()}\r\n                                        disabled={disabled}\r\n                                        variant=\"success\"\r\n                                    >\r\n                                        Sort\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                            <ComplexityTable />\r\n                        </div>\r\n                        <div className=\"col-sm-1\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { swap } from \"./swap\";\r\n\r\nexport function getBubbleSortAnimations(array = []) {\r\n    const animations = [];\r\n    let isSorted = false;\r\n    let counter = 0;\r\n    while (!isSorted) {\r\n        isSorted = true;\r\n        for (let i = 0; i < array.length - 1 - counter; i++) {\r\n            if (array[i] > array[i + 1]) {\r\n                swap(i, i + 1, array);\r\n                isSorted = false;\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            } else {\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            }\r\n        }\r\n        counter++;\r\n    }\r\n    return animations;\r\n}\r\n","import { swap } from \"./swap\";\r\n\r\nexport function getInsertionSortAnimations(array = []) {\r\n    const animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        let j = i;\r\n        while (j > 0 && array[j] < array[j - 1]) {\r\n            swap(j, j - 1, array);\r\n            animations.push([j, j - 1, array[j], array[j - 1]]);\r\n            j -= 1;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n","import { swap } from \"./swap\";\r\n\r\nexport function getSelectionSortAnimations(array = []) {\r\n    const animations = [];\r\n    let currentIdx = 0;\r\n    while (currentIdx < array.length - 1) {\r\n        let smallestIdx = currentIdx;\r\n        for (let i = currentIdx + 1; i < array.length; i++) {\r\n            if (array[smallestIdx] > array[i]) smallestIdx = i;\r\n        }\r\n        if (currentIdx < smallestIdx) {\r\n            swap(currentIdx, smallestIdx, array);\r\n            animations.push([\r\n                currentIdx,\r\n                smallestIdx,\r\n                array[currentIdx],\r\n                array[smallestIdx],\r\n            ]);\r\n        }\r\n        currentIdx++;\r\n    }\r\n    return animations;\r\n}\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title, colorName = \"white\" }) => (\r\n    <div>\r\n        <h2 style={{ color: colorName }} className=\"mt-3 text-center\">\r\n            {title}\r\n        </h2>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst ArrayTile = ({ idx, val, type }) =>\r\n    type === \"binarySearch\" ? (\r\n        <div className=\"b-array-bar\">\r\n            {`${val}`}\r\n            <br />\r\n            <span>{`${idx}`}</span>\r\n        </div>\r\n    ) : (\r\n        <div className=\"l-array-bar\">\r\n            {`${val}`}\r\n            <br />\r\n            <span>{`${idx}`}</span>\r\n        </div>\r\n    );\r\n\r\nexport default ArrayTile;\r\n","import React from \"react\";\r\n\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\r\nimport { binarySearchAnimations } from \"./../searchingAlgorithms\";\r\n\r\nimport Header from \"./../../utils/header\";\r\nimport ArrayTile from \"./../arrayTile\";\r\n\r\n//Stylesheets\r\nimport \"./binarySearch.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 20;\r\nconst DEFAULT_COLOR = \"#212121\";\r\nconst FOUND_COLOR = \"#2ecc71\";\r\nconst NOT_FOUND_COLOR = \"#FA405A\";\r\nconst ANIMATION_SPEED_SECONDS = 0.5;\r\n\r\nexport default class BinarySearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            found: false,\r\n            disabled: false,\r\n            elementFoundAt: 0,\r\n            target: null,\r\n            msgAfterExecution: null,\r\n            previousLength: 0,\r\n            animations: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        let array = [];\r\n        const prevArray = document.getElementsByClassName(\"b-array-bar\");\r\n        document.getElementById(\"binarySearchTargetVal\").value = \"\";\r\n        for (let idx = 0; idx < prevArray.length; idx++) {\r\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\r\n            prevArray[idx].classList.remove(\"growFind\");\r\n            prevArray[idx].classList.remove(\"highlight\");\r\n        }\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 850));\r\n        }\r\n        let sortedArray = array.slice().sort((a, b) => a - b);\r\n        this.setState({\r\n            array: sortedArray,\r\n            found: false,\r\n            disabled: false,\r\n            msgAfterExecution: null,\r\n            previousLength: this.state.animations.length,\r\n        });\r\n    }\r\n\r\n    hightlightWithinBounds(start, end, arrayTiles) {\r\n        for (let i = start; i <= end; i++) {\r\n            arrayTiles[i].style.backgroundColor = NOT_FOUND_COLOR;\r\n            arrayTiles[i].style.transition = \"100ms all\";\r\n        }\r\n    }\r\n\r\n    resetAllTiles(arrayTiles) {\r\n        for (let i = 0; i < arrayTiles.length; i++) {\r\n            arrayTiles[i].style.backgroundColor = DEFAULT_COLOR;\r\n            arrayTiles[i].style.transition = \"100ms all\";\r\n        }\r\n    }\r\n\r\n    binarySearch() {\r\n        const { array } = this.state;\r\n        const animations = [];\r\n        let count = 0;\r\n        const arrayTiles = document.getElementsByClassName(\"b-array-bar\");\r\n        const target = document.getElementById(\"binarySearchTargetVal\").value;\r\n        if (target === \"\") return;\r\n\r\n        binarySearchAnimations(\r\n            array,\r\n            0,\r\n            array.length - 1,\r\n            parseInt(target),\r\n            animations\r\n        );\r\n\r\n        for (let k = 0; k < animations.length; k++) {\r\n            const [left, right, mid, found] = animations[k];\r\n            count++;\r\n\r\n            if (k === animations.length - 1 && found) {\r\n                setTimeout(() => {\r\n                    this.setState({ disabled: true, found: true });\r\n                    this.resetAllTiles(arrayTiles);\r\n                    arrayTiles[mid].classList.add(\"highlight\");\r\n                    arrayTiles[mid].style.backgroundColor = FOUND_COLOR;\r\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n\r\n            if (left === 0 && right === 0 && mid === 0 && !found) {\r\n                setTimeout(() => {\r\n                    console.log(\"ELement not found\");\r\n                    this.setState({\r\n                        msgAfterExecution: `Element not found`,\r\n                        found: false,\r\n                    });\r\n                    this.resetAllTiles(arrayTiles);\r\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.setState({ disabled: true });\r\n                this.resetAllTiles(arrayTiles);\r\n                this.hightlightWithinBounds(left, right, arrayTiles);\r\n            }, k * 1000 * ANIMATION_SPEED_SECONDS);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.setState({ disabled: false });\r\n        }, count * 1000 * ANIMATION_SPEED_SECONDS);\r\n    }\r\n\r\n    render() {\r\n        const { array, found, disabled, msgAfterExecution } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container-fluid p-4\">\r\n                    <center>\r\n                        <Header colorName=\"white\" title=\"Binary Search\" />\r\n                        <div className=\"row\">\r\n                            <div className=\"container\">\r\n                                <div className=\"col-sm-1\"></div>\r\n                                <InputGroup className=\"col-sm-6\">\r\n                                    <FormControl\r\n                                        type=\"number\"\r\n                                        id=\"binarySearchTargetVal\"\r\n                                        placeholder=\"Find\"\r\n                                    />\r\n                                    <InputGroup.Append>\r\n                                        <Button\r\n                                            id=\"binarySearchBtn\"\r\n                                            onClick={() => this.binarySearch()}\r\n                                            disabled={disabled}\r\n                                            variant=\"success\"\r\n                                        >\r\n                                            Search\r\n                                        </Button>\r\n                                        <Button\r\n                                            id=\"binarySearchResetArray\"\r\n                                            onClick={() => this.resetArray()}\r\n                                            disabled={disabled}\r\n                                            variant=\"danger\"\r\n                                        >\r\n                                            Reset Array\r\n                                        </Button>\r\n                                    </InputGroup.Append>\r\n                                </InputGroup>\r\n                                <div className=\"col-sm-1 \"></div>\r\n                            </div>\r\n                        </div>\r\n                        {!found ? (\r\n                            <p className=\"not-found\">{msgAfterExecution}</p>\r\n                        ) : null}\r\n                        <br />\r\n                        <div className=\"container-fluid\">\r\n                            {array.map((value, idx) => (\r\n                                <ArrayTile\r\n                                    type={\"binarySearch\"}\r\n                                    key={idx}\r\n                                    idx={idx}\r\n                                    val={value}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    </center>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function linearSearchAnimations(array, target) {\r\n    let animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        const ele = array[i];\r\n        const tar = parseInt(target);\r\n        if (ele === tar) {\r\n            animations.push([i, ele, true]);\r\n            break;\r\n        } else {\r\n            animations.push([i, ele, false]);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function binarySearchAnimations(\r\n    array,\r\n    left,\r\n    right,\r\n    element,\r\n    animations = []\r\n) {\r\n    if (right >= left) {\r\n        let mid = parseInt(left + (right - left) / 2);\r\n        if (array[mid] === element) {\r\n            animations.push([left, right, mid, true]);\r\n            return true;\r\n        } else if (array[mid] > element) {\r\n            animations.push([left, right, mid, false]);\r\n            binarySearchAnimations(array, left, mid - 1, element, animations);\r\n        } else {\r\n            animations.push([left, right, mid, false]);\r\n            binarySearchAnimations(array, mid + 1, right, element, animations);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\r\nimport { linearSearchAnimations } from \"./../searchingAlgorithms\";\r\n\r\nimport Header from \"./../../utils/header\";\r\nimport ArrayTile from \"./../arrayTile\";\r\n\r\n// Stylesheets\r\nimport \"./linearSearch.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 20;\r\nconst DEFAULT_COLOR = \"#212121\";\r\nconst FOUND_COLOR = \"#2ecc71\";\r\nconst NOT_FOUND_COLOR = \"#FA405A\";\r\nconst ANIMATION_SPEED_SECONDS = 0.5;\r\n\r\nexport default class LinearSearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            found: false,\r\n            disabled: false,\r\n            elementFoundAt: 0,\r\n            target: null,\r\n            msgAfterExecution: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        const prevArray = document.getElementsByClassName(\"l-array-bar\");\r\n        const found = false;\r\n        const disabled = false;\r\n        document.getElementById(\"targetVal\").value = \"\";\r\n        for (let idx = 0; idx < prevArray.length; idx++) {\r\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\r\n            prevArray[idx].classList.remove(\"growFind\");\r\n            prevArray[idx].classList.remove(\"highlight\");\r\n        }\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 730));\r\n        }\r\n        this.setState({ array, found, disabled, msgAfterExecution: \"\" });\r\n    }\r\n\r\n    linearSearch() {\r\n        var msg = \"\";\r\n        const target = document.getElementById(\"targetVal\").value;\r\n        if (target === \"\") return;\r\n        const animations = linearSearchAnimations(this.state.array, target);\r\n        console.log(animations);\r\n        let count = 0;\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [idx, currentEle, found] = animations[i];\r\n            const arrayBars = document.getElementsByClassName(\"l-array-bar\");\r\n            const arrayBar = arrayBars[idx];\r\n            const arrayBarStyle = arrayBar.style;\r\n\r\n            count++;\r\n\r\n            if (found) {\r\n                msg = `${currentEle} found at index ${idx}`;\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        found: true,\r\n                        disabled: true,\r\n                        elementFoundAt: idx,\r\n                        target: currentEle,\r\n                    });\r\n                    arrayBarStyle.backgroundColor = FOUND_COLOR;\r\n                    arrayBar.classList.add(\"growFind\");\r\n                    arrayBar.classList.add(\"highlight\");\r\n                }, i * ANIMATION_SPEED_SECONDS * 1000);\r\n                break;\r\n            } else {\r\n                msg = `${target} not found`;\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        found: false,\r\n                        disabled: true,\r\n                    });\r\n                    arrayBarStyle.backgroundColor = NOT_FOUND_COLOR;\r\n                    arrayBar.classList.add(\"growFind\");\r\n                }, i * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({\r\n                disabled: false,\r\n                msgAfterExecution: msg,\r\n            });\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { array, found, disabled, msgAfterExecution } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container-fluid p-4\">\r\n                    <center>\r\n                        <Header colorName=\"white\" title=\"Linear Search\" />\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-1\"></div>\r\n                            <div className=\"container\">\r\n                                <InputGroup className=\"col-sm-6\">\r\n                                    <FormControl\r\n                                        type=\"number\"\r\n                                        id=\"targetVal\"\r\n                                        placeholder=\"Find\"\r\n                                    />\r\n                                    <InputGroup.Append>\r\n                                        <Button\r\n                                            onClick={() => this.linearSearch()}\r\n                                            disabled={disabled}\r\n                                            variant=\"success\"\r\n                                        >\r\n                                            Search\r\n                                        </Button>\r\n                                        <Button\r\n                                            onClick={() => this.resetArray()}\r\n                                            disabled={disabled}\r\n                                            variant=\"danger\"\r\n                                        >\r\n                                            Reset Array\r\n                                        </Button>\r\n                                    </InputGroup.Append>\r\n                                </InputGroup>\r\n                            </div>\r\n                            <div className=\"col-sm-1 \"></div>\r\n                        </div>\r\n                        <br />\r\n                        {!found ? (\r\n                            <p className=\"found growFind\">\r\n                                {msgAfterExecution}\r\n                            </p>\r\n                        ) : null}\r\n                        <div className=\"container-fluid\">\r\n                            {array.map((value, idx) => (\r\n                                <ArrayTile\r\n                                    type={`linearSearch`}\r\n                                    key={idx}\r\n                                    idx={idx}\r\n                                    val={value}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    </center>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/*\r\n-----------------------\r\nBACKTRACKING ALGORITHMS\r\n-----------------------\r\n*/\r\n\r\n/* -----------------------\r\nN Queen Problem Algorithms\r\n-------------------------- */\r\n\r\nfunction createBoard(size) {\r\n    const board = [];\r\n    for (let i = 0; i < size; i++) {\r\n        board.push(getRowsOfZeroes(size));\r\n    }\r\n    return board;\r\n}\r\n\r\nexport function getNQueensAnimations(size, animations = []) {\r\n    const board = createBoard(size);\r\n    solveNQueenUtil(board, 0, animations);\r\n    return board;\r\n}\r\n\r\nfunction solveNQueenUtil(board = [], col, animations = []) {\r\n    let N = board.length;\r\n\r\n    if (col >= N) return true;\r\n\r\n    for (let i = 0; i < N; i++) {\r\n        if (isSafe(board, i, col)) {\r\n            board[i][col] = true;\r\n            animations.push([i, col, true]);\r\n            if (solveNQueenUtil(board, col + 1, animations)) return true;\r\n            board[i][col] = false;\r\n            animations.push([i, col, false]);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isSafe(board = [], row, col) {\r\n    let N = board.length;\r\n\r\n    for (let i = 0; i < col; i++) {\r\n        if (board[row][i] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; j >= 0 && i < N; i++, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function getRowsOfZeroes(size) {\r\n    const row = [];\r\n    for (let i = 0; i < size; i++) {\r\n        row.push(false);\r\n    }\r\n    return row;\r\n}\r\n\r\n/* ----------------------\r\nRat In A Maze Solving Algorithms\r\n------------------------- */\r\n\r\nfunction isRatSafe(maze = [], x, y) {\r\n    let mazeRows = maze.length;\r\n    let mazeCols = maze[0].length;\r\n\r\n    return x >= 0 && x < mazeRows && y >= 0 && y < mazeCols && maze[x][y] === 1;\r\n}\r\n\r\nfunction solveRatInAMaze(maze = [], x, y, sol = [], animations = []) {\r\n    let endOfMazeX = maze.length - 1;\r\n    let endOfMazeY = maze[0].length - 1;\r\n\r\n    // Goal State || Base Case\r\n    if (x === endOfMazeX && y === endOfMazeY && maze[x][y] === 1) {\r\n        sol[x][y] = 1;\r\n        animations.push([x, y, true]);\r\n        return true;\r\n    }\r\n\r\n    // Check if maze is valid\r\n    if (isRatSafe(maze, x, y)) {\r\n        animations.push([x, y, true]);\r\n        sol[x][y] = 1;\r\n\r\n        // Move Down\r\n        if (solveRatInAMaze(maze, x, y + 1, sol, animations)) return true;\r\n        // Move Right\r\n        if (solveRatInAMaze(maze, x + 1, y, sol, animations)) return true;\r\n        // No Move is Possible -> Backtrack\r\n        else {\r\n            animations.push([x, y, false]);\r\n            sol[x][y] = 0;\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function solveMaze(maze = [], sol = []) {\r\n    const animations = [];\r\n    if (!solveRatInAMaze(maze, 0, 0, sol, animations)) {\r\n        console.log(\"Solution doesn't\");\r\n        return [sol, []];\r\n    }\r\n    return [sol, animations];\r\n}\r\n\r\nexport function prepareSolutionBoardOfZeroes(size) {\r\n    let sol = [];\r\n    for (let i = 0; i < size; i++) {\r\n        var temp = [];\r\n        for (let j = 0; j < size; j++) {\r\n            temp.push(0);\r\n        }\r\n        sol.push(temp);\r\n    }\r\n    return sol;\r\n}\r\n","import React from \"react\";\r\nimport crown from \"./../nQueensProblem/crown.png\";\r\n\r\nimport { getNQueensAnimations } from \"./../backTrackingAlgorithms\";\r\n\r\nimport BackBar from './../../utils/backbar'\r\n\r\n// Stylesheets\r\nimport \"./../../utils/animate.min.css\";\r\nimport \"./nQueensProblem.css\";\r\n\r\nconst SIZE_OF_BOARD = 4;\r\nvar ANIMATION_SPEED_SECONDS = 1.5;\r\n\r\nconst CELL_COLOR = \"#BFC9CA\";\r\nconst SAFE_COLOR = \"#DC143C\";\r\nconst CROWN_COLOR = \"#FFFFFF\";\r\nconst SAFE = \"#2ECC71\";\r\n\r\nexport default class NQueensProblem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { disabled: false };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawBoard(SIZE_OF_BOARD);\r\n    }\r\n\r\n    drawBoard(SIZE) {\r\n        // This function draws the NxN board and according to the size applies styling which makes easier to visualise huge sized boards on small screens.\r\n        let padding = 0;\r\n        let fontSize = 0;\r\n\r\n        // Deleting the previous board cells and results section for new start\r\n        document.getElementById(\"nQueensBoard\").innerHTML = \"\";\r\n        document.getElementById(\"NQueenResults\").innerHTML = \"\";\r\n\r\n        // Calculating the board size and style values\r\n        switch (SIZE) {\r\n            case 4:\r\n                padding = 20;\r\n                fontSize = 30;\r\n                ANIMATION_SPEED_SECONDS = 1.5;\r\n                break;\r\n            case 5:\r\n            case 6:\r\n                padding = 10;\r\n                fontSize = 25;\r\n                ANIMATION_SPEED_SECONDS = 1;\r\n                break;\r\n            case 7:\r\n                padding = 7;\r\n                fontSize = 20;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            case 8:\r\n                padding = 7;\r\n                fontSize = 18;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        // creating the board\r\n        const container = document.getElementById(\"nQueensBoard\");\r\n\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--Qgrid-rows\", SIZE);\r\n        container.style.setProperty(\"--Qgrid-cols\", SIZE);\r\n\r\n        // Adding cells to the board\r\n        for (let j = 0; j < SIZE * SIZE; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            let item = document.createElement(\"i\");\r\n\r\n            cell.appendChild(item).className = \"fas fa-crown\";\r\n            container.appendChild(cell).className = \"Qgrid-item q-array-tile\";\r\n        }\r\n\r\n        // Styling the cells\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n        const crownsI = document.getElementsByClassName(\"fa-crown\");\r\n        for (let l = 0; l < arrayTiles.length; l++) {\r\n            arrayTiles[l].style.padding = `${padding}px`;\r\n            arrayTiles[l].style.backgroundColor = CELL_COLOR;\r\n            crownsI[l].style.fontSize = `${fontSize}px`;\r\n            crownsI[l].style.color = CELL_COLOR;\r\n        }\r\n\r\n        // Since everything is just created dynamically we have to apply styles\r\n        // one by one to each element because depending on the board size we are\r\n        // determining the corressponding styles.\r\n    }\r\n\r\n    NQueensProblem() {\r\n        // Getting the size from the input box\r\n        let size = parseInt(document.getElementById(\"boardInput\").value);\r\n\r\n        // checking if size is greater than 3 because no solutions exist for n <= 3\r\n        // checking if size is lesser than 17 because the user's RAM will be\r\n        // used heavily for greater sizes and page can be unresponsive.\r\n        if (size < 4 || size > 8) {\r\n            alert(\"Board Size must be between 4 and 8\");\r\n            return;\r\n        }\r\n        // finally drawing the board\r\n        this.drawBoard(size);\r\n\r\n        // getting the cells for visualisations\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n\r\n        // getting the crown element inside the cell\r\n        const crown = document.getElementsByClassName(\"fa-crown\");\r\n\r\n        // getting the results div\r\n        const resultsDiv = document.getElementById(\"NQueenResults\");\r\n\r\n        // getting the Animations for NQueens.\r\n        const NQueensAnimations = [];\r\n        getNQueensAnimations(size, NQueensAnimations);\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < NQueensAnimations.length; i++) {\r\n            count++;\r\n\r\n            // Disabling all the input sources untill Algorithm is finished.\r\n            this.setState({ disabled: true });\r\n\r\n            const [row, col, isQueenSafe] = NQueensAnimations[i];\r\n            const idx = size * row + col;\r\n\r\n            // Creating an alert message for Progress Section\r\n            let alert = document.createElement(\"div\");\r\n            alert.classList.add(\"alert\");\r\n            alert.classList.add(\"animate__animated\");\r\n            alert.classList.add(\"animate__slideInDown\");\r\n\r\n            setTimeout(() => {\r\n                // checking if this is a valid position\r\n                if (isQueenSafe) {\r\n                    // valid positions are highlighted as RED which is royal\r\n                    arrayTiles[idx].style.backgroundColor = SAFE_COLOR;\r\n                    arrayTiles[idx].classList.add(\"safe-queen\");\r\n\r\n                    // making the crown visible\r\n                    crown[idx].style.color = CROWN_COLOR;\r\n                    // popping up the crown with an effect\r\n                    crown[idx].classList.add(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `Trying Queen at row ${row} and col ${col}`;\r\n                    alert.classList.add(\"alert-success\");\r\n                } else {\r\n                    // invalid positions are highlighted as default board color\r\n                    arrayTiles[idx].style.backgroundColor = CELL_COLOR;\r\n                    arrayTiles[idx].classList.remove(\"safe-queen\");\r\n\r\n                    // making the crown invisible\r\n                    crown[idx].style.color = CELL_COLOR;\r\n                    // removing the popup animation\r\n                    crown[idx].classList.remove(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `row ${row} and col ${col} didn't work out. Backtracking`;\r\n                    alert.classList.add(\"alert-danger\");\r\n                }\r\n                // adding alert to results div\r\n                resultsDiv.prepend(alert);\r\n                // adding a transition for color change\r\n                arrayTiles[idx].style.transition = \"200ms all\";\r\n            }, ANIMATION_SPEED_SECONDS * 1000 * i);\r\n            // looping according to animation speeds\r\n        }\r\n\r\n        // getting the queens at final safe positions\r\n        const trueValues = document.getElementsByClassName(\"safe-queen\");\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < trueValues.length; i++) {\r\n                trueValues[i].style.backgroundColor = SAFE;\r\n                trueValues[i].style.transition = \"300ms all\";\r\n\r\n                // Enabling the input sources for another visualization\r\n                this.setState({ disabled: false });\r\n\r\n                // This means we have reached at final positions with Queens placed\r\n                // on Valid positions\r\n                if (i === trueValues.length - 1) {\r\n                    // Adding final alert message\r\n                    let alert = document.createElement(\"div\");\r\n                    alert.classList.add(\"alert\");\r\n                    alert.classList.add(\"animate__animated\");\r\n                    alert.classList.add(\"animate__slideInUp\");\r\n                    alert.innerHTML = `All Queens have been placed on Valid positions`;\r\n                    alert.classList.add(\"alert-primary\");\r\n\r\n                    // Prepending the alert message\r\n                    resultsDiv.prepend(alert);\r\n                }\r\n            }\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-12\">\r\n                                    <center>\r\n                                        <h2 className=\"text-light\">\r\n                                            <img\r\n                                                className=\"mb-2\"\r\n                                                src={crown}\r\n                                                width=\"40px\"\r\n                                                alt={\"\"}\r\n                                            />{\" \"}\r\n                                            N-Queens Visualiser\r\n                                        </h2>\r\n                                    </center>\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                className=\"Qbox Qboard mb-2\"\r\n                                id=\"nQueensBoard\"\r\n                            ></div>\r\n                            <div className=\"row\">\r\n                                <div className=\"input-group mt-1 container col-sm-6\">\r\n                                    <div className=\"input-group-prepend\">\r\n                                        <span className=\"input-group-text\">\r\n                                            Board Size\r\n                                        </span>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        id=\"boardInput\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Board Size\"\r\n                                        defaultValue=\"4\"\r\n                                        readOnly={disabled}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            className=\"btn btn-secondary\"\r\n                                            disabled={disabled}\r\n                                            onClick={() =>\r\n                                                this.NQueensProblem()\r\n                                            }\r\n                                        >\r\n                                            Visualise N-Queens\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {!disabled ? (\r\n                                <center>\r\n                                    <small className=\"text-muted\">\r\n                                        <div className=\"mt-2\"></div>\r\n                                        The Visualiser works best for board\r\n                                        sizes between 4 and 8 inclusive. Larger\r\n                                        board sizes would make the page\r\n                                        unresponsive because of huge number of\r\n                                        computations. &nbsp;\r\n                                        <a href=\"https://github.com/dipeshpatil/algorithms-visualiser/tree/master/src/backTrackingAlgorithms\">\r\n                                            GitHub Repo for this project\r\n                                        </a>\r\n                                    </small>\r\n                                </center>\r\n                            ) : null}\r\n                        </div>\r\n                        <div id=\"NQueenResults\" className=\"col-sm-4 mt-3\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const MAZES = [\r\n    [\r\n        [1, 1, 0, 0, 1, 1, 1, 0],\r\n        [1, 0, 1, 1, 0, 1, 1, 1],\r\n        [1, 1, 1, 1, 0, 0, 1, 1],\r\n        [0, 0, 0, 1, 1, 1, 0, 0],\r\n        [1, 1, 1, 1, 0, 0, 1, 1],\r\n        [0, 0, 0, 1, 1, 1, 1, 0],\r\n        [1, 1, 0, 0, 0, 0, 1, 1],\r\n        [1, 0, 1, 1, 0, 0, 1, 1],\r\n    ],\r\n    [\r\n        [1, 1, 1, 1, 1, 1, 1, 1],\r\n        [0, 0, 1, 0, 0, 1, 1, 1],\r\n        [0, 0, 1, 0, 0, 1, 0, 0],\r\n        [0, 1, 1, 1, 0, 1, 0, 0],\r\n        [0, 0, 0, 1, 1, 1, 1, 1],\r\n        [1, 0, 0, 0, 1, 0, 0, 1],\r\n        [1, 0, 1, 1, 1, 0, 0, 1],\r\n        [1, 0, 0, 0, 0, 0, 0, 1],\r\n    ],\r\n    [\r\n        [1, 1, 1, 1, 0, 1, 1, 1],\r\n        [1, 0, 0, 0, 1, 0, 0, 0],\r\n        [1, 0, 0, 0, 1, 1, 1, 1],\r\n        [1, 1, 1, 0, 0, 0, 0, 0],\r\n        [1, 0, 1, 0, 0, 0, 0, 0],\r\n        [1, 0, 1, 1, 1, 1, 1, 1],\r\n        [1, 0, 1, 0, 0, 0, 0, 0],\r\n        [1, 1, 1, 1, 1, 1, 1, 1],\r\n    ],\r\n];\r\n\r\nexport default MAZES;\r\n","import React from \"react\";\r\n\r\nimport BackBar from \"./../../utils/backbar\";\r\n\r\nimport {\r\n    solveMaze,\r\n    prepareSolutionBoardOfZeroes,\r\n} from \"./../backTrackingAlgorithms\";\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval\";\r\n// Stylesheets\r\nimport \"./ratInAMaze.css\";\r\n\r\nimport MAZES from \"./arrayofMazes\";\r\n\r\nconst MAZE = MAZES[randomIntFromInterval(0, MAZES.length - 1)];\r\n// const MAZE = MAZES[2];\r\nconst SOL = prepareSolutionBoardOfZeroes(MAZE.length);\r\n\r\nconst NO_PATH_COLOR = \"#ededed\";\r\nconst PATH_COLOR = \"#ADD2FE\";\r\nconst SAFE_COLOR = \"#B0FCEF\";\r\n\r\nconst ANIMATION_SPEED_MS = 1000;\r\n\r\nexport default class RatInAMazeProblem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawBoard(MAZE);\r\n    }\r\n\r\n    testAlgo() {\r\n        const sol = solveMaze(MAZE, SOL, []);\r\n\r\n        const animations = sol[1];\r\n        const solution = sol[0];\r\n\r\n        const blocks = document.getElementsByClassName(\"r-array-tile\");\r\n        const rat = document.getElementsByClassName(\"rat\");\r\n        let count = 0;\r\n\r\n        const finalPath = [];\r\n        for (let i = 0; i < solution.length; i++) {\r\n            for (let j = 0; j < solution.length; j++) {\r\n                let idx = MAZE.length * i + j;\r\n                if (solution[i][j] === 1) {\r\n                    finalPath.push(idx);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [x, y, isRatSafe] = animations[i]; // current\r\n            const idx = x * MAZE.length + y;\r\n            const blockStyle = blocks[idx].style;\r\n\r\n            setTimeout(() => {\r\n                if (isRatSafe) {\r\n                    blockStyle.backgroundColor = SAFE_COLOR;\r\n                    rat[idx].innerHTML = \"🐀\";\r\n                    rat[idx].classList.add(\"flipH\");\r\n                } else {\r\n                    blockStyle.backgroundColor = PATH_COLOR;\r\n                    rat[idx].innerHTML = \"\";\r\n                    rat[idx].classList.remove(\"flipH\");\r\n                }\r\n            }, i * ANIMATION_SPEED_MS);\r\n            count = i;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < finalPath.length; i++) {\r\n                setTimeout(() => {\r\n                    blocks[finalPath[i]].classList.add(\"highlightPath\");\r\n                }, i * 40);\r\n            }\r\n        }, (count + 1) * ANIMATION_SPEED_MS);\r\n    }\r\n\r\n    drawBoard(MAZE = []) {\r\n        const ROWS = MAZE.length;\r\n        const COLS = MAZE[0].length;\r\n\r\n        const maze = document.getElementById(\"ratMazeBoard\");\r\n        maze.innerHTML = \"\";\r\n\r\n        maze.style.setProperty(\"--Rgrid-rows\", ROWS);\r\n        maze.style.setProperty(\"--Rgrid-cols\", COLS);\r\n\r\n        for (let i = 0; i < ROWS; i++) {\r\n            for (let j = 0; j < COLS; j++) {\r\n                let cell = document.createElement(\"div\");\r\n                let item = document.createElement(\"i\");\r\n                let cellStyle = cell.style;\r\n                cell.appendChild(item).className = \"fas rat\";\r\n\r\n                if (i === 0 && j === 0) {\r\n                    cell.appendChild(item).classList.add(\"flipH\");\r\n                    item.innerHTML = \"🐀\";\r\n                }\r\n\r\n                if (i === ROWS - 1 && j === COLS - 1) {\r\n                    cell.appendChild(item).classList.add(\"flipH\");\r\n                    item.innerHTML = \"🚪\";\r\n                }\r\n\r\n                if (MAZE[i][j] === 1) {\r\n                    cellStyle.backgroundColor = PATH_COLOR;\r\n                } else {\r\n                    cellStyle.backgroundColor = NO_PATH_COLOR;\r\n                }\r\n\r\n                maze.appendChild(cell).className = \"Rgrid-item r-array-tile\";\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <h2 className=\"text-center mt-2\">Rat In A Maze</h2>\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-7\">\r\n                            <div\r\n                                className=\"Rbox Rboard mt-2\"\r\n                                id=\"ratMazeBoard\"\r\n                            ></div>\r\n                        </div>\r\n                        <div className=\"col-sm-5 mt-2\">\r\n                            <button\r\n                                onClick={() => this.testAlgo()}\r\n                                className=\"btn btn-sm btn-primary\"\r\n                            >\r\n                                Visualize Algorithm\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavBar from \"./utils/navbar\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\n//  IndexTable\r\nimport IndexTable from \"./utils/indexTable\";\r\n\r\n//  Word Search\r\nimport WordSearch from \"./wordSearchVisualiser/wordSearch\";\r\n\r\n//  Pathfinder Visualiser\r\nimport PathFinderVisualiser from \"./pathFinderVisualiser/pathfinderVisualiser\";\r\n\r\n//  Sorting Visualiser\r\nimport SortingVisualiser from \"./sortingAlgorithms/sortingVisualiser\";\r\n\r\n//  Searching Visualiser\r\nimport BinarySearch from \"./searchingAlgorithms/binarySearch/binarySearch\";\r\nimport LinearSearch from \"./searchingAlgorithms/linearSearch/linearSearch\";\r\n\r\n//  Backtracking Visualiser\r\nimport NQueensProblem from \"./backTrackingAlgorithms/nQueensProblem/nQueensProblem\";\r\nimport RatInAMazeProblem from \"./backTrackingAlgorithms/ratInAMaze/ratInAMaze\";\r\n\r\n//  Stylesheets\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport BackBar from \"./utils/backbar\";\r\n\r\nconst searchCombined = () => {\r\n    return (\r\n        <div>\r\n            <BackBar />\r\n            <LinearSearch />\r\n            <BinarySearch />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar />\r\n                <Route exact path=\"/\" component={IndexTable} />\r\n                <Route path=\"/sorting\" component={SortingVisualiser} />\r\n                <Route path=\"/searching\" component={searchCombined} />\r\n                <Route path=\"/n-queens-problem\" component={NQueensProblem} />\r\n                <Route path=\"/rat-in-a-maze\" component={RatInAMazeProblem} />\r\n                <Route path=\"/pathfinder\" component={PathFinderVisualiser} />\r\n                <Route path=\"/word-search\" component={WordSearch} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}